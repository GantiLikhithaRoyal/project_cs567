Last login: Sun Dec  8 00:40:40 on ttys000
likhitharoyal@Likhithas-MBP project_cs567-1 % docker pull agroce/deepstate_examples_aflpp

Using default tag: latest
latest: Pulling from agroce/deepstate_examples_aflpp
bc38caa0f5b9: Pulling fs layer 
f78a2599db88: Pulling fs layer 
36505266dcc6: Pulling fs layer 
23884877105a: Pulling fs layer 
fc656c528e13: Pulling fs layer 
53ffec2c2baa: Pulling fs layer 
a76073978dc9: Pulling fs layer 
bdcdfcac2943: Pulling fs layer 
42859026242e: Pulling fs layer 
42859026242e: Download complete 
686b6f86553d: Download complete 
cdeb15eac062: Download complete 
bfcea1530216: Download complete 
26823b18d7ab: Download complete 
c5b3640cd527: Download complete 
301a39c440ca: Download complete 
4f4fb700ef54: Download complete 
ffb4f490328c: Download complete 
9ccb256f2a3c: Download complete 
a6b0f4a22af2: Download complete 
242de4471689: Download complete 
742aaf5a4896: Download complete 
282e3c913eac: Download complete 
478750fe3db7: Download complete 
fd24b5535805: Download complete 
25d10970d7ea: Download complete 
00f39c8f9f88: Download complete 
fd843a866276: Download complete 
bc2f1e1afb38: Download complete 
c77672be106a: Download complete 
2910811b6c42: Download complete 
a413a0883fda: Download complete 
Digest: sha256:7b0d9fb4c725b0886c191ae697ba486e98151c403cc890edeee3e05c81d325f3
Status: Downloaded newer image for agroce/deepstate_examples_aflpp:latest
docker.io/agroce/deepstate_examples_aflpp:latest
likhitharoyal@Likhithas-MBP project_cs567-1 % docker run -it agroce/deepstate_examples_aflpp

WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
user@73efacf12311:~/deepstate$ docker run -it agroce/deepstate_examples_aflpp
bash: docker: command not found
user@73efacf12311:~/deepstate$ docker run -it --platform linux/arm64 agroce/deepstate_examples_aflpp
bash: docker: command not found
user@73efacf12311:~/deepstate$ 
user@73efacf12311:~/deepstate$ docker ps
bash: docker: command not found
user@73efacf12311:~/deepstate$ pip3 install tstl
Defaulting to user installation because normal site-packages is not writeable
Collecting tstl
  Downloading tstl-1.2.39-py3-none-any.whl (108 kB)
     |################################| 108 kB 2.9 MB/s            
Collecting coverage==4.5.2
  Downloading coverage-4.5.2-cp36-cp36m-manylinux1_x86_64.whl (205 kB)
     |################################| 205 kB 7.7 MB/s            
Installing collected packages: coverage, tstl
Successfully installed coverage-4.5.2 tstl-1.2.39
user@73efacf12311:~/deepstate$ pip3 install universalmutator --upgrade
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: universalmutator in /home/user/.local/lib/python3.6/site-packages (1.1.11)
Collecting universalmutator
  Downloading universalmutator-1.1.12-py3-none-any.whl (42 kB)
     |################################| 42 kB 1.5 MB/s            
Requirement already satisfied: tabulate in /home/user/.local/lib/python3.6/site-packages (from universalmutator) (0.8.10)
Requirement already satisfied: comby in /home/user/.local/lib/python3.6/site-packages (from universalmutator) (0.0.3)
Requirement already satisfied: python-levenshtein in /home/user/.local/lib/python3.6/site-packages (from universalmutator) (0.21.1)
Requirement already satisfied: loguru>=0.4 in /home/user/.local/lib/python3.6/site-packages (from comby->universalmutator) (0.7.0)
Requirement already satisfied: requests~=2.0 in /home/user/.local/lib/python3.6/site-packages (from comby->universalmutator) (2.27.1)
Requirement already satisfied: typing>=0.4 in /home/user/.local/lib/python3.6/site-packages (from comby->universalmutator) (3.7.4.3)
Requirement already satisfied: attrs>=19.2.0 in /home/user/.local/lib/python3.6/site-packages (from comby->universalmutator) (22.2.0)
Requirement already satisfied: Levenshtein==0.21.1 in /home/user/.local/lib/python3.6/site-packages (from python-levenshtein->universalmutator) (0.21.1)
Requirement already satisfied: rapidfuzz<4.0.0,>=2.3.0 in /home/user/.local/lib/python3.6/site-packages (from Levenshtein==0.21.1->python-levenshtein->universalmutator) (2.11.1)
Requirement already satisfied: aiocontextvars>=0.2.0 in /home/user/.local/lib/python3.6/site-packages (from loguru>=0.4->comby->universalmutator) (0.2.2)
Requirement already satisfied: certifi>=2017.4.17 in /home/user/.local/lib/python3.6/site-packages (from requests~=2.0->comby->universalmutator) (2023.7.22)
Requirement already satisfied: charset-normalizer~=2.0.0 in /home/user/.local/lib/python3.6/site-packages (from requests~=2.0->comby->universalmutator) (2.0.12)
Requirement already satisfied: idna<4,>=2.5 in /usr/lib/python3/dist-packages (from requests~=2.0->comby->universalmutator) (2.6)
Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/user/.local/lib/python3.6/site-packages (from requests~=2.0->comby->universalmutator) (1.26.16)
Requirement already satisfied: contextvars==2.4 in /home/user/.local/lib/python3.6/site-packages (from aiocontextvars>=0.2.0->loguru>=0.4->comby->universalmutator) (2.4)
Requirement already satisfied: immutables>=0.9 in /home/user/.local/lib/python3.6/site-packages (from contextvars==2.4->aiocontextvars>=0.2.0->loguru>=0.4->comby->universalmutator) (0.19)
Requirement already satisfied: typing-extensions>=3.7.4.3 in /home/user/.local/lib/python3.6/site-packages (from immutables>=0.9->contextvars==2.4->aiocontextvars>=0.2.0->loguru>=0.4->comby->universalmutator) (4.1.1)
Installing collected packages: universalmutator
  Attempting uninstall: universalmutator
    Found existing installation: universalmutator 1.1.11
    Uninstalling universalmutator-1.1.11:
      Successfully uninstalled universalmutator-1.1.11
Successfully installed universalmutator-1.1.12
user@73efacf12311:~/deepstate$ git clone https://github.com/GantiLikhithaRoyal/project_cs567.git
Cloning into 'project_cs567'...
remote: Enumerating objects: 689, done.
remote: Counting objects: 100% (689/689), done.
remote: Compressing objects: 100% (44/44), done.
remote: Total 689 (delta 641), reused 689 (delta 641), pack-reused 0 (from 0)
Receiving objects: 100% (689/689), 546.48 KiB | 1.79 MiB/s, done.
Resolving deltas: 100% (641/641), done.
user@73efacf12311:~/deepstate$ tstl banking_system.tstl
usage: tstl [-h] [-v] [-o OUTPUT] [-c CLASSNAME] [-n] [-r] [-i] [-e] [-R]
            [--forceRefExceptionMatch] [--forceStrongRefExceptionMatch]
            [--checkFailureDeterminism] [-a] [-s] [-p] [--noReload] [--debug]
            [--no-debug]
            filename

positional arguments:
  filename              Path to the .tstl file.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         Display the tstl version.
  -o OUTPUT, --output OUTPUT
                        Name of the file containing the generated harness code
                        (default = sut.py)
  -c CLASSNAME, --classname CLASSNAME
                        Name of the class representing the SUT (default = sut)
  -n, --noCover         Disable generating coverage collection support. Faster
                        testing, but no coverage info!
  -r, --coverReload     Generate coverage for module reload behavior.
  -i, --coverInit       Generate coverage for SUT initialization behavior.
  -e, --enumerateEnabled
                        Enumerate enabled actions instead of trying to find
                        one, useful when |actions| typically >> |enabled|.
  -R, --defaultReplay   Backtracking defaults to replay method.
  --forceRefExceptionMatch
                        Exceptions must match (basic type, not message) with
                        reference.
  --forceStrongRefExceptionMatch
                        Exceptions must match message with reference.
  --checkFailureDeterminism
                        Check that failures are deterministic.
  -a, --ignoreAngles    Do not use angle brackets as TSTL markers, for use
                        with some languages.
  -s, --stats           Enable statistics on each action. Slows exection
                        considerably.
  -p, --pylib           Add if you need to test something in the standard
                        Python library. Will blow up coverage!
  --noReload            Do not reload module on each restart. For testing
                        modules with broken reload (e.g. TensorFlow)
  --debug               Toggle debug mode on
  --no-debug
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl", line 8, in <module>
    sys.exit(main())
  File "/home/user/.local/lib/python3.6/site-packages/tstl/harnessmaker.py", line 453, in main
    config = make_config(parsed_args, parser)
  File "/home/user/.local/lib/python3.6/site-packages/tstl/harnessmaker.py", line 125, in make_config
    'Cannot locate the .tstl file at path={}'.format(pargs.output))
ValueError: Cannot locate the .tstl file at path=sut.py
user@73efacf12311:~/deepstate$ cd project_cs567
user@73efacf12311:~/deepstate/project_cs567$ tstl banking_system.tstl
Generating harness core using config=Config(tstl='banking_system.tstl', version=False, output='sut.py', classname='sut', noCover=False, coverReload=False, coverInit=False, enumerateEnabled=False, defaultReplay=False, forceRefExceptionMatch=False, forceStrongRefExceptionMatch=False, checkFailureDeterminism=False, ignoreAngles=False, stats=False, pylib=False, noReload=False, debug=False)
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout <seconds> --exploit <P>
bash: syntax error near unexpected token `newline'
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout <seconds> --exploit <P>
bash: syntax error near unexpected token `newline'
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 60 --exploit 0.7
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_replay failure.<num>.test
bash: num: No such file or directory
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout <seconds> --exploit <P>
bash: syntax error near unexpected token `newline'
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 60 --exploit 0.7
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 60 --exploit 0.7
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 60 --exploit 0.7
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 60 --exploit 0.7
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl banking_system.tstl
Generating harness core using config=Config(tstl='banking_system.tstl', version=False, output='sut.py', classname='sut', noCover=False, coverReload=False, coverInit=False, enumerateEnabled=False, defaultReplay=False, forceRefExceptionMatch=False, forceStrongRefExceptionMatch=False, checkFailureDeterminism=False, ignoreAngles=False, stats=False, pylib=False, noReload=False, debug=False)
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 60 --exploit 0.7
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ pip install --upgrade tstl
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: tstl in /home/user/.local/lib/python3.6/site-packages (1.2.39)
Requirement already satisfied: coverage==4.5.2 in /home/user/.local/lib/python3.6/site-packages (from tstl) (4.5.2)
user@73efacf12311:~/deepstate/project_cs567$ touch sut_wrapper.py
user@73efacf12311:~/deepstate/project_cs567$ cd .
user@73efacf12311:~/deepstate/project_cs567$ cd
user@73efacf12311:~$ git clone https://github.com/GantiLikhithaRoyal/project_cs567.git
Cloning into 'project_cs567'...
remote: Enumerating objects: 689, done.
remote: Counting objects: 100% (689/689), done.
remote: Compressing objects: 100% (44/44), done.
remote: Total 689 (delta 641), reused 689 (delta 641), pack-reused 0 (from 0)
Receiving objects: 100% (689/689), 546.48 KiB | 1.83 MiB/s, done.
Resolving deltas: 100% (641/641), done.
user@73efacf12311:~$ docker run -it agroce/deepstate_examples_aflpp
bash: docker: command not found
user@73efacf12311:~$ docker pull agroce/deepstate_examples_aflpp
bash: docker: command not found
user@73efacf12311:~$ cd project_cs567-1
bash: cd: project_cs567-1: No such file or directory
user@73efacf12311:~$ cd project_cs567
user@73efacf12311:~/project_cs567$ cd 
user@73efacf12311:~$ cd deepstate
user@73efacf12311:~/deepstate$ cd project_ccs567-1
bash: cd: project_ccs567-1: No such file or directory
user@73efacf12311:~/deepstate$ cd project_cs567-1
bash: cd: project_cs567-1: No such file or directory
user@73efacf12311:~/deepstate$ cd project_cs567-1 
bash: cd: project_cs567-1: No such file or directory
user@73efacf12311:~/deepstate$ cd project_cs567   
user@73efacf12311:~/deepstate/project_cs567$ tstl avlnew.tstl
usage: tstl [-h] [-v] [-o OUTPUT] [-c CLASSNAME] [-n] [-r] [-i] [-e] [-R]
            [--forceRefExceptionMatch] [--forceStrongRefExceptionMatch]
            [--checkFailureDeterminism] [-a] [-s] [-p] [--noReload] [--debug]
            [--no-debug]
            filename

positional arguments:
  filename              Path to the .tstl file.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         Display the tstl version.
  -o OUTPUT, --output OUTPUT
                        Name of the file containing the generated harness code
                        (default = sut.py)
  -c CLASSNAME, --classname CLASSNAME
                        Name of the class representing the SUT (default = sut)
  -n, --noCover         Disable generating coverage collection support. Faster
                        testing, but no coverage info!
  -r, --coverReload     Generate coverage for module reload behavior.
  -i, --coverInit       Generate coverage for SUT initialization behavior.
  -e, --enumerateEnabled
                        Enumerate enabled actions instead of trying to find
                        one, useful when |actions| typically >> |enabled|.
  -R, --defaultReplay   Backtracking defaults to replay method.
  --forceRefExceptionMatch
                        Exceptions must match (basic type, not message) with
                        reference.
  --forceStrongRefExceptionMatch
                        Exceptions must match message with reference.
  --checkFailureDeterminism
                        Check that failures are deterministic.
  -a, --ignoreAngles    Do not use angle brackets as TSTL markers, for use
                        with some languages.
  -s, --stats           Enable statistics on each action. Slows exection
                        considerably.
  -p, --pylib           Add if you need to test something in the standard
                        Python library. Will blow up coverage!
  --noReload            Do not reload module on each restart. For testing
                        modules with broken reload (e.g. TensorFlow)
  --debug               Toggle debug mode on
  --no-debug
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl", line 8, in <module>
    sys.exit(main())
  File "/home/user/.local/lib/python3.6/site-packages/tstl/harnessmaker.py", line 453, in main
    config = make_config(parsed_args, parser)
  File "/home/user/.local/lib/python3.6/site-packages/tstl/harnessmaker.py", line 125, in make_config
    'Cannot locate the .tstl file at path={}'.format(pargs.output))
ValueError: Cannot locate the .tstl file at path=sut.py
user@73efacf12311:~/deepstate/project_cs567$ tstl banking_system.tstl
Generating harness core using config=Config(tstl='banking_system.tstl', version=False, output='sut.py', classname='sut', noCover=False, coverReload=False, coverInit=False, enumerateEnabled=False, defaultReplay=False, forceRefExceptionMatch=False, forceStrongRefExceptionMatch=False, checkFailureDeterminism=False, ignoreAngles=False, stats=False, pylib=False, noReload=False, debug=False)
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 300 --exploit 0.7Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_replay failure.1.test
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_replay", line 5, in <module>
    from tstl.replay import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/replay.py", line 14, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_regress failure.1.test
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_regress", line 5, in <module>
    from tstl.runregressions import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/runregressions.py", line 14, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl banking_system.tstl
Generating harness core using config=Config(tstl='banking_system.tstl', version=False, output='sut.py', classname='sut', noCover=False, coverReload=False, coverInit=False, enumerateEnabled=False, defaultReplay=False, forceRefExceptionMatch=False, forceStrongRefExceptionMatch=False, checkFailureDeterminism=False, ignoreAngles=False, stats=False, pylib=False, noReload=False, debug=False)
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt --timeout 600 --exploit 0.8Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ tstl_rt
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ python3 sut.py
  File "sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ 
user@73efacf12311:~/deepstate/project_cs567$ python3 sut.py
  File "sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ python3 sut.py
  File "sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ python3 sut.py
  File "sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ mutate <file>
bash: syntax error near unexpected token `newline'
user@73efacf12311:~/deepstate/project_cs567$ 
user@73efacf12311:~/deepstate/project_cs567$ mutate banking_system.py 
*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, python.rules
SKIPPED 154 MUTANTS ONLY CHANGING STRING LITERALS
745 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 2: class BankAccount:  ==>  class BankAccount:
break;...INVALID 
PROCESSING MUTANT: 2: class BankAccount:  ==>  class BankAccount:
continue;...INVALID 
PROCESSING MUTANT: 2: class BankAccount:  ==>  pass...INVALID 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, account_number, owner, balance=1):...VALID [written to ./banking_system.mutant.0.py] 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, account_number, owner, balance=-1):...VALID [written to ./banking_system.mutant.1.py] 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, account_number, owner, balance=(0+1)):...VALID [written to ./banking_system.mutant.2.py] 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, account_number, owner, balance=(0-1)):...VALID [written to ./banking_system.mutant.3.py] 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, account_number, owner, balance=0):
    break;...INVALID 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, account_number, owner, balance=0):
    continue;...INVALID 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__ ( account_number,self, owner, balance=0):...VALID [written to ./banking_system.mutant.4.py] 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self , owner, account_number, balance=0):...VALID [written to ./banking_system.mutant.5.py] 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      pass...INVALID 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, balance=0):...VALID [written to ./banking_system.mutant.6.py] 
PROCESSING MUTANT: 3:     def __init__(self, account_number, owner, balance=0):  ==>      def __init__(self, account_number, balance=0):...VALID [written to ./banking_system.mutant.7.py] 
PROCESSING MUTANT: 4:         self.account_number = account_number  ==>          self.account_number = account_number
        break;...INVALID 
PROCESSING MUTANT: 4:         self.account_number = account_number  ==>          self.account_number = account_number
        continue;...INVALID 
PROCESSING MUTANT: 4:         self.account_number = account_number  ==>          pass...VALID [written to ./banking_system.mutant.8.py] 
PROCESSING MUTANT: 5:         self.owner = owner  ==>          self.owner = owner
        break;...INVALID 
PROCESSING MUTANT: 5:         self.owner = owner  ==>          self.owner = owner
        continue;...INVALID 
PROCESSING MUTANT: 5:         self.owner = owner  ==>          pass...VALID [written to ./banking_system.mutant.9.py] 
PROCESSING MUTANT: 6:         self.balance = balance  ==>          self.balance = balance
        break;...INVALID 
PROCESSING MUTANT: 6:         self.balance = balance  ==>          self.balance = balance
        continue;...INVALID 
PROCESSING MUTANT: 6:         self.balance = balance  ==>          pass...VALID [written to ./banking_system.mutant.10.py] 
PROCESSING MUTANT: 7:         self.transaction_history = []  ==>          self.transaction_history = []
        break;...INVALID 
PROCESSING MUTANT: 7:         self.transaction_history = []  ==>          self.transaction_history = []
        continue;...INVALID 
PROCESSING MUTANT: 7:         self.transaction_history = []  ==>          pass...VALID [written to ./banking_system.mutant.11.py] 
PROCESSING MUTANT: 9:     def deposit(self, amount):  ==>      def deposit(self, amount):
    break;...INVALID 
PROCESSING MUTANT: 9:     def deposit(self, amount):  ==>      def deposit(self, amount):
    continue;...INVALID 
PROCESSING MUTANT: 9:     def deposit(self, amount):  ==>      def deposit ( amount,self):...VALID [written to ./banking_system.mutant.12.py] 
PROCESSING MUTANT: 9:     def deposit(self, amount):  ==>      pass...INVALID 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount < 0:...VALID [written to ./banking_system.mutant.13.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount == 0:...VALID [written to ./banking_system.mutant.14.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount >= 0:...VALID [written to ./banking_system.mutant.15.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount <= 0:...VALID [written to ./banking_system.mutant.16.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount != 0:...VALID [written to ./banking_system.mutant.17.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount > 1:...VALID [written to ./banking_system.mutant.18.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount > -1:...VALID [written to ./banking_system.mutant.19.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount > (0+1):...VALID [written to ./banking_system.mutant.20.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount > (0-1):...VALID [written to ./banking_system.mutant.21.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount > 0:
        break;...INVALID 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if amount > 0:
        continue;...INVALID 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          if not (amount > 0):...VALID [written to ./banking_system.mutant.22.py] 
PROCESSING MUTANT: 10:         if amount > 0:  ==>          pass...INVALID 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              self.balance -= amount...VALID [written to ./banking_system.mutant.23.py] 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              self.balance *= amount...VALID [written to ./banking_system.mutant.24.py] 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              self.balance /= amount...VALID [written to ./banking_system.mutant.25.py] 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              self.balance %= amount...VALID [written to ./banking_system.mutant.26.py] 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              self.balance =+ amount...VALID [written to ./banking_system.mutant.27.py] 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              self.balance += amount
            break;...INVALID 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              self.balance += amount
            continue;...INVALID 
PROCESSING MUTANT: 11:             self.balance += amount  ==>              pass...VALID [written to ./banking_system.mutant.28.py] 
PROCESSING MUTANT: 12:             self.transaction_history.append(f"Deposit: +${amount:.2f}")  ==>              self.transaction_history.append(f"Deposit: +${amount:.2f}")
            break;...INVALID 
PROCESSING MUTANT: 12:             self.transaction_history.append(f"Deposit: +${amount:.2f}")  ==>              self.transaction_history.append(f"Deposit: +${amount:.2f}")
            continue;...INVALID 
PROCESSING MUTANT: 12:             self.transaction_history.append(f"Deposit: +${amount:.2f}")  ==>              self.transaction_history.append(f"")...VALID [written to ./banking_system.mutant.29.py] 
PROCESSING MUTANT: 12:             self.transaction_history.append(f"Deposit: +${amount:.2f}")  ==>              self.transaction_history.appbegin(f"Deposit: +${amount:.2f}")...REDUNDANT 
PROCESSING MUTANT: 12:             self.transaction_history.append(f"Deposit: +${amount:.2f}")  ==>              pass...VALID [written to ./banking_system.mutant.30.py] 
PROCESSING MUTANT: 13:         else:  ==>          else:
        break;...INVALID 
PROCESSING MUTANT: 13:         else:  ==>          else:
        continue;...INVALID 
PROCESSING MUTANT: 13:         else:  ==>          pass...INVALID 
PROCESSING MUTANT: 14:             print("Invalid deposit amount.")  ==>              print("Invalid deposit amount.")
            break;...INVALID 
PROCESSING MUTANT: 14:             print("Invalid deposit amount.")  ==>              print("Invalid deposit amount.")
            continue;...INVALID 
PROCESSING MUTANT: 14:             print("Invalid deposit amount.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 14:             print("Invalid deposit amount.")  ==>              pass...VALID [written to ./banking_system.mutant.31.py] 
PROCESSING MUTANT: 16:     def withdraw(self, amount):  ==>      def withdraw(self, amount):
    break;...INVALID 
PROCESSING MUTANT: 16:     def withdraw(self, amount):  ==>      def withdraw(self, amount):
    continue;...INVALID 
PROCESSING MUTANT: 16:     def withdraw(self, amount):  ==>      def withdraw ( amount,self):...VALID [written to ./banking_system.mutant.32.py] 
PROCESSING MUTANT: 16:     def withdraw(self, amount):  ==>      pass...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount == self.balance:...VALID [written to ./banking_system.mutant.33.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount != self.balance:...VALID [written to ./banking_system.mutant.34.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount < self.balance:...VALID [written to ./banking_system.mutant.35.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount > self.balance:...VALID [written to ./banking_system.mutant.36.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount >= self.balance:...VALID [written to ./banking_system.mutant.37.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount === self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount <== self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount >== self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount !== self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount < 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.38.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount == 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.39.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount >= 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.40.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount <= 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.41.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount != 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.42.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 1 and amount <= self.balance:...VALID [written to ./banking_system.mutant.43.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > -1 and amount <= self.balance:...VALID [written to ./banking_system.mutant.44.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > (0+1) and amount <= self.balance:...VALID [written to ./banking_system.mutant.45.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > (0-1) and amount <= self.balance:...VALID [written to ./banking_system.mutant.46.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount <= self.balance:
        break;...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount <= self.balance:
        continue;...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if not (amount > 0 and amount <= self.balance):...VALID [written to ./banking_system.mutant.47.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0  or amount <= self.balance:...VALID [written to ./banking_system.mutant.48.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and True...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>  True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>   True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>    True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>     True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>      True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>       True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>        True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>         True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          iTrue and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          ifTrue and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if True and amount <= self.balance:...VALID [written to ./banking_system.mutant.49.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if aTrue and amount <= self.balance:...VALID [written to ./banking_system.mutant.50.py] 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amoTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amouTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amounTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amountTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount >True and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > True and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 17:         if amount > 0 and amount <= self.balance:  ==>          pass...INVALID 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance += amount...VALID [written to ./banking_system.mutant.51.py] 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance *= amount...VALID [written to ./banking_system.mutant.52.py] 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance /= amount...VALID [written to ./banking_system.mutant.53.py] 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance %= amount...VALID [written to ./banking_system.mutant.54.py] 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance =- amount...VALID [written to ./banking_system.mutant.55.py] 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance = amount...VALID [written to ./banking_system.mutant.56.py] 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance -= amount
            break;...INVALID 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              self.balance -= amount
            continue;...INVALID 
PROCESSING MUTANT: 18:             self.balance -= amount  ==>              pass...VALID [written to ./banking_system.mutant.57.py] 
PROCESSING MUTANT: 19:             self.transaction_history.append(f"Withdrawal: -${amount:.2f}")  ==>              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
            break;...INVALID 
PROCESSING MUTANT: 19:             self.transaction_history.append(f"Withdrawal: -${amount:.2f}")  ==>              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
            continue;...INVALID 
PROCESSING MUTANT: 19:             self.transaction_history.append(f"Withdrawal: -${amount:.2f}")  ==>              self.transaction_history.append(f"")...VALID [written to ./banking_system.mutant.58.py] 
PROCESSING MUTANT: 19:             self.transaction_history.append(f"Withdrawal: -${amount:.2f}")  ==>              self.transaction_history.appbegin(f"Withdrawal: -${amount:.2f}")...REDUNDANT 
PROCESSING MUTANT: 19:             self.transaction_history.append(f"Withdrawal: -${amount:.2f}")  ==>              pass...VALID [written to ./banking_system.mutant.59.py] 
PROCESSING MUTANT: 20:         else:  ==>          else:
        break;...INVALID 
PROCESSING MUTANT: 20:         else:  ==>          else:
        continue;...INVALID 
PROCESSING MUTANT: 20:         else:  ==>          pass...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              print("Invalid withdrawal amount or insufficient funds.")
            break;...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              print("Invalid withdrawal amount or insufficient funds.")
            continue;...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              print("Invalid withdrawal amount or False...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>  False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>   False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>    False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>     False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>      False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>       False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>        False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>         False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>          False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>           False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>            False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>             False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              pFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              prFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              priFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              prinFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              printFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              print(False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 21:             print("Invalid withdrawal amount or insufficient funds.")  ==>              pass...VALID [written to ./banking_system.mutant.60.py] 
PROCESSING MUTANT: 23:     def transfer(self, amount, recipient_account):  ==>      def transfer(self, amount, recipient_account):
    break;...INVALID 
PROCESSING MUTANT: 23:     def transfer(self, amount, recipient_account):  ==>      def transfer(self, amount, recipient_account):
    continue;...INVALID 
PROCESSING MUTANT: 23:     def transfer(self, amount, recipient_account):  ==>      def transfer ( amount,self, recipient_account):...VALID [written to ./banking_system.mutant.61.py] 
PROCESSING MUTANT: 23:     def transfer(self, amount, recipient_account):  ==>      def transfer(self , recipient_account, amount):...VALID [written to ./banking_system.mutant.62.py] 
PROCESSING MUTANT: 23:     def transfer(self, amount, recipient_account):  ==>      pass...INVALID 
PROCESSING MUTANT: 23:     def transfer(self, amount, recipient_account):  ==>      def transfer(self, recipient_account):...VALID [written to ./banking_system.mutant.63.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount == self.balance:...VALID [written to ./banking_system.mutant.64.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount != self.balance:...VALID [written to ./banking_system.mutant.65.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount < self.balance:...VALID [written to ./banking_system.mutant.66.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount > self.balance:...VALID [written to ./banking_system.mutant.67.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount >= self.balance:...VALID [written to ./banking_system.mutant.68.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount === self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount <== self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount >== self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount !== self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount < 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.69.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount == 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.70.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount >= 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.71.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount <= 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.72.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount != 0 and amount <= self.balance:...VALID [written to ./banking_system.mutant.73.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 1 and amount <= self.balance:...VALID [written to ./banking_system.mutant.74.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > -1 and amount <= self.balance:...VALID [written to ./banking_system.mutant.75.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > (0+1) and amount <= self.balance:...VALID [written to ./banking_system.mutant.76.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > (0-1) and amount <= self.balance:...VALID [written to ./banking_system.mutant.77.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount <= self.balance:
        break;...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and amount <= self.balance:
        continue;...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if not (amount > 0 and amount <= self.balance):...VALID [written to ./banking_system.mutant.78.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0  or amount <= self.balance:...VALID [written to ./banking_system.mutant.79.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0 and True...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>  True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>   True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>    True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>     True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>      True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>       True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>        True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>         True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          iTrue and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          ifTrue and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if True and amount <= self.balance:...VALID [written to ./banking_system.mutant.80.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if aTrue and amount <= self.balance:...VALID [written to ./banking_system.mutant.81.py] 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amoTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amouTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amounTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amountTrue and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount >True and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > True and amount <= self.balance:...REDUNDANT 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          if amount > 0True and amount <= self.balance:...INVALID 
PROCESSING MUTANT: 24:         if amount > 0 and amount <= self.balance:  ==>          pass...INVALID 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance += amount...VALID [written to ./banking_system.mutant.82.py] 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance *= amount...VALID [written to ./banking_system.mutant.83.py] 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance /= amount...VALID [written to ./banking_system.mutant.84.py] 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance %= amount...VALID [written to ./banking_system.mutant.85.py] 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance =- amount...VALID [written to ./banking_system.mutant.86.py] 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance = amount...VALID [written to ./banking_system.mutant.87.py] 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance -= amount
            break;...INVALID 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              self.balance -= amount
            continue;...INVALID 
PROCESSING MUTANT: 25:             self.balance -= amount  ==>              pass...VALID [written to ./banking_system.mutant.88.py] 
PROCESSING MUTANT: 26:             self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")  ==>              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
            break;...INVALID 
PROCESSING MUTANT: 26:             self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")  ==>              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
            continue;...INVALID 
PROCESSING MUTANT: 26:             self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")  ==>              self.transaction_history.append(f"")...VALID [written to ./banking_system.mutant.89.py] 
PROCESSING MUTANT: 26:             self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")  ==>              self.transaction_history.appbegin(f"Transfer to {recipient_account.owner}: -${amount:.2f}")...REDUNDANT 
PROCESSING MUTANT: 26:             self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")  ==>              pass...VALID [written to ./banking_system.mutant.90.py] 
PROCESSING MUTANT: 27:             recipient_account.deposit(amount)  ==>              recipient_account.deposit(amount)
            break;...INVALID 
PROCESSING MUTANT: 27:             recipient_account.deposit(amount)  ==>              recipient_account.deposit(amount)
            continue;...INVALID 
PROCESSING MUTANT: 27:             recipient_account.deposit(amount)  ==>              pass...VALID [written to ./banking_system.mutant.91.py] 
PROCESSING MUTANT: 28:         else:  ==>          else:
        break;...INVALID 
PROCESSING MUTANT: 28:         else:  ==>          else:
        continue;...INVALID 
PROCESSING MUTANT: 28:         else:  ==>          pass...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              print("Invalid transfer amount or insufficient funds.")
            break;...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              print("Invalid transfer amount or insufficient funds.")
            continue;...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              print("Invalid transfer amount or False...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>  False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>   False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>    False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>     False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>      False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>       False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>        False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>         False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>          False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>           False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>            False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>             False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              pFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              prFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              priFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              prinFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              printFalse or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              print(False or insufficient funds.")...INVALID 
PROCESSING MUTANT: 29:             print("Invalid transfer amount or insufficient funds.")  ==>              pass...VALID [written to ./banking_system.mutant.92.py] 
PROCESSING MUTANT: 31:     def get_balance(self):  ==>      def get_balance(self):
    break;...INVALID 
PROCESSING MUTANT: 31:     def get_balance(self):  ==>      def get_balance(self):
    continue;...INVALID 
PROCESSING MUTANT: 31:     def get_balance(self):  ==>      pass...INVALID 
PROCESSING MUTANT: 32:         return self.balance  ==>          return self.balance
        break;...INVALID 
PROCESSING MUTANT: 32:         return self.balance  ==>          return self.balance
        continue;...INVALID 
PROCESSING MUTANT: 32:         return self.balance  ==>          return None...VALID [written to ./banking_system.mutant.93.py] 
PROCESSING MUTANT: 32:         return self.balance  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 34:     def get_transaction_history(self):  ==>      def get_transaction_history(self):
    break;...INVALID 
PROCESSING MUTANT: 34:     def get_transaction_history(self):  ==>      def get_transaction_history(self):
    continue;...INVALID 
PROCESSING MUTANT: 34:     def get_transaction_history(self):  ==>      pass...INVALID 
PROCESSING MUTANT: 35:         return self.transaction_history  ==>          return self.transaction_history
        break;...INVALID 
PROCESSING MUTANT: 35:         return self.transaction_history  ==>          return self.transaction_history
        continue;...INVALID 
PROCESSING MUTANT: 35:         return self.transaction_history  ==>          return None...VALID [written to ./banking_system.mutant.94.py] 
PROCESSING MUTANT: 35:         return self.transaction_history  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 37:     def __str__(self):  ==>      def __str__(self):
    break;...INVALID 
PROCESSING MUTANT: 37:     def __str__(self):  ==>      def __str__(self):
    continue;...INVALID 
PROCESSING MUTANT: 37:     def __str__(self):  ==>      pass...INVALID 
PROCESSING MUTANT: 38:         return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"  ==>          return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"
        break;...INVALID 
PROCESSING MUTANT: 38:         return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"  ==>          return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"
        continue;...INVALID 
PROCESSING MUTANT: 38:         return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"  ==>          return f""...VALID [written to ./banking_system.mutant.95.py] 
PROCESSING MUTANT: 38:         return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"  ==>          return None...VALID [written to ./banking_system.mutant.96.py] 
PROCESSING MUTANT: 38:         return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 40: class Bank:  ==>  class Bank:
break;...INVALID 
PROCESSING MUTANT: 40: class Bank:  ==>  class Bank:
continue;...INVALID 
PROCESSING MUTANT: 40: class Bank:  ==>  pass...INVALID 
PROCESSING MUTANT: 41:     def __init__(self):  ==>      def __init__(self):
    break;...INVALID 
PROCESSING MUTANT: 41:     def __init__(self):  ==>      def __init__(self):
    continue;...INVALID 
PROCESSING MUTANT: 41:     def __init__(self):  ==>      pass...INVALID 
PROCESSING MUTANT: 42:         self.accounts = {}  ==>          self.accounts = {}
        break;...INVALID 
PROCESSING MUTANT: 42:         self.accounts = {}  ==>          self.accounts = {}
        continue;...INVALID 
PROCESSING MUTANT: 42:         self.accounts = {}  ==>          pass...VALID [written to ./banking_system.mutant.97.py] 
PROCESSING MUTANT: 44:     def create_account(self, account_number, owner):  ==>      def create_account(self, account_number, owner):
    break;...INVALID 
PROCESSING MUTANT: 44:     def create_account(self, account_number, owner):  ==>      def create_account(self, account_number, owner):
    continue;...INVALID 
PROCESSING MUTANT: 44:     def create_account(self, account_number, owner):  ==>      def create_account ( account_number,self, owner):...VALID [written to ./banking_system.mutant.98.py] 
PROCESSING MUTANT: 44:     def create_account(self, account_number, owner):  ==>      def create_account(self , owner, account_number):...VALID [written to ./banking_system.mutant.99.py] 
PROCESSING MUTANT: 44:     def create_account(self, account_number, owner):  ==>      pass...INVALID 
PROCESSING MUTANT: 44:     def create_account(self, account_number, owner):  ==>      def create_account(self, owner):...VALID [written to ./banking_system.mutant.100.py] 
PROCESSING MUTANT: 45:         if account_number not in self.accounts:  ==>          if account_number not in self.accounts:
        break;...INVALID 
PROCESSING MUTANT: 45:         if account_number not in self.accounts:  ==>          if account_number not in self.accounts:
        continue;...INVALID 
PROCESSING MUTANT: 45:         if account_number not in self.accounts:  ==>          if not (account_number not in self.accounts):...VALID [written to ./banking_system.mutant.101.py] 
PROCESSING MUTANT: 45:         if account_number not in self.accounts:  ==>          if account_number  in self.accounts:...REDUNDANT 
PROCESSING MUTANT: 45:         if account_number not in self.accounts:  ==>          pass...INVALID 
PROCESSING MUTANT: 46:             self.accounts[account_number] = BankAccount(account_number, owner)  ==>              self.accounts[account_number] = BankAccount(account_number, owner)
            break;...INVALID 
PROCESSING MUTANT: 46:             self.accounts[account_number] = BankAccount(account_number, owner)  ==>              self.accounts[account_number] = BankAccount(account_number, owner)
            continue;...INVALID 
PROCESSING MUTANT: 46:             self.accounts[account_number] = BankAccount(account_number, owner)  ==>              self.accounts[account_number] = BankAccount ( owner,account_number)...VALID [written to ./banking_system.mutant.102.py] 
PROCESSING MUTANT: 46:             self.accounts[account_number] = BankAccount(account_number, owner)  ==>              pass...VALID [written to ./banking_system.mutant.103.py] 
PROCESSING MUTANT: 46:             self.accounts[account_number] = BankAccount(account_number, owner)  ==>              self.accounts[] = BankAccount(account_number, owner)...INVALID 
PROCESSING MUTANT: 46:             self.accounts[account_number] = BankAccount(account_number, owner)  ==>              self.accounts[ owner)...INVALID 
PROCESSING MUTANT: 47:             print("Account created successfully.")  ==>              print("Account created successfully.")
            break;...INVALID 
PROCESSING MUTANT: 47:             print("Account created successfully.")  ==>              print("Account created successfully.")
            continue;...INVALID 
PROCESSING MUTANT: 47:             print("Account created successfully.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 47:             print("Account created successfully.")  ==>              pass...VALID [written to ./banking_system.mutant.104.py] 
PROCESSING MUTANT: 48:         else:  ==>          else:
        break;...INVALID 
PROCESSING MUTANT: 48:         else:  ==>          else:
        continue;...INVALID 
PROCESSING MUTANT: 48:         else:  ==>          pass...INVALID 
PROCESSING MUTANT: 49:             print("Account already exists.")  ==>              print("Account already exists.")
            break;...INVALID 
PROCESSING MUTANT: 49:             print("Account already exists.")  ==>              print("Account already exists.")
            continue;...INVALID 
PROCESSING MUTANT: 49:             print("Account already exists.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 49:             print("Account already exists.")  ==>              pass...VALID [written to ./banking_system.mutant.105.py] 
PROCESSING MUTANT: 51:     def get_account(self, account_number):  ==>      def get_account(self, account_number):
    break;...INVALID 
PROCESSING MUTANT: 51:     def get_account(self, account_number):  ==>      def get_account(self, account_number):
    continue;...INVALID 
PROCESSING MUTANT: 51:     def get_account(self, account_number):  ==>      def get_account ( account_number,self):...VALID [written to ./banking_system.mutant.106.py] 
PROCESSING MUTANT: 51:     def get_account(self, account_number):  ==>      pass...INVALID 
PROCESSING MUTANT: 52:         return self.accounts.get(account_number, None)  ==>          return self.accounts.get(account_number, None)
        break;...INVALID 
PROCESSING MUTANT: 52:         return self.accounts.get(account_number, None)  ==>          return self.accounts.get(account_number, None)
        continue;...INVALID 
PROCESSING MUTANT: 52:         return self.accounts.get(account_number, None)  ==>          return self.accounts.get ( None,account_number)...VALID [written to ./banking_system.mutant.107.py] 
PROCESSING MUTANT: 52:         return self.accounts.get(account_number, None)  ==>          return None...VALID [written to ./banking_system.mutant.108.py] 
PROCESSING MUTANT: 52:         return self.accounts.get(account_number, None)  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 54:     def close_account(self, account_number):  ==>      def close_account(self, account_number):
    break;...INVALID 
PROCESSING MUTANT: 54:     def close_account(self, account_number):  ==>      def close_account(self, account_number):
    continue;...INVALID 
PROCESSING MUTANT: 54:     def close_account(self, account_number):  ==>      def close_account ( account_number,self):...VALID [written to ./banking_system.mutant.109.py] 
PROCESSING MUTANT: 54:     def close_account(self, account_number):  ==>      pass...INVALID 
PROCESSING MUTANT: 55:         if account_number in self.accounts:  ==>          if account_number in self.accounts:
        break;...INVALID 
PROCESSING MUTANT: 55:         if account_number in self.accounts:  ==>          if account_number in self.accounts:
        continue;...INVALID 
PROCESSING MUTANT: 55:         if account_number in self.accounts:  ==>          if not (account_number in self.accounts):...VALID [written to ./banking_system.mutant.110.py] 
PROCESSING MUTANT: 55:         if account_number in self.accounts:  ==>          pass...INVALID 
PROCESSING MUTANT: 56:             del self.accounts[account_number]  ==>              del self.accounts[account_number]
            break;...INVALID 
PROCESSING MUTANT: 56:             del self.accounts[account_number]  ==>              del self.accounts[account_number]
            continue;...INVALID 
PROCESSING MUTANT: 56:             del self.accounts[account_number]  ==>              pass...VALID [written to ./banking_system.mutant.111.py] 
PROCESSING MUTANT: 56:             del self.accounts[account_number]  ==>              del self.accounts[]...INVALID 
PROCESSING MUTANT: 57:             print("Account closed successfully.")  ==>              print("Account closed successfully.")
            break;...INVALID 
PROCESSING MUTANT: 57:             print("Account closed successfully.")  ==>              print("Account closed successfully.")
            continue;...INVALID 
PROCESSING MUTANT: 57:             print("Account closed successfully.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 57:             print("Account closed successfully.")  ==>              pass...VALID [written to ./banking_system.mutant.112.py] 
PROCESSING MUTANT: 58:         else:  ==>          else:
        break;...INVALID 
PROCESSING MUTANT: 58:         else:  ==>          else:
        continue;...INVALID 
PROCESSING MUTANT: 58:         else:  ==>          pass...INVALID 
PROCESSING MUTANT: 59:             print("Account not found.")  ==>              print("Account not found.")
            break;...INVALID 
PROCESSING MUTANT: 59:             print("Account not found.")  ==>              print("Account not found.")
            continue;...INVALID 
PROCESSING MUTANT: 59:             print("Account not found.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 59:             print("Account not found.")  ==>              pass...VALID [written to ./banking_system.mutant.113.py] 
PROCESSING MUTANT: 61: def main():  ==>  def main():
break;...INVALID 
PROCESSING MUTANT: 61: def main():  ==>  def main():
continue;...INVALID 
PROCESSING MUTANT: 61: def main():  ==>  pass...INVALID 
PROCESSING MUTANT: 62:     bank = Bank()  ==>      bank = Bank()
    break;...INVALID 
PROCESSING MUTANT: 62:     bank = Bank()  ==>      bank = Bank()
    continue;...INVALID 
PROCESSING MUTANT: 62:     bank = Bank()  ==>      pass...VALID [written to ./banking_system.mutant.114.py] 
PROCESSING MUTANT: 64:     while True:  ==>      while True:
    break;...INVALID 
PROCESSING MUTANT: 64:     while True:  ==>      while True:
    continue;...INVALID 
PROCESSING MUTANT: 64:     while True:  ==>      if True:...INVALID 
PROCESSING MUTANT: 64:     while True:  ==>      while not (True):...VALID [written to ./banking_system.mutant.115.py] 
PROCESSING MUTANT: 64:     while True:  ==>      pass...INVALID 
PROCESSING MUTANT: 64:     while True:  ==>      while False:...VALID [written to ./banking_system.mutant.116.py] 
PROCESSING MUTANT: 65:         print("\nBanking System Menu")  ==>          print("\nBanking System Menu")
        break;...VALID [written to ./banking_system.mutant.117.py] 
PROCESSING MUTANT: 65:         print("\nBanking System Menu")  ==>          print("\nBanking System Menu")
        continue;...VALID [written to ./banking_system.mutant.118.py] 
PROCESSING MUTANT: 65:         print("\nBanking System Menu")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 65:         print("\nBanking System Menu")  ==>          pass...VALID [written to ./banking_system.mutant.119.py] 
PROCESSING MUTANT: 66:         print("1. Create Account")  ==>          print("1. Create Account")
        break;...VALID [written to ./banking_system.mutant.120.py] 
PROCESSING MUTANT: 66:         print("1. Create Account")  ==>          print("1. Create Account")
        continue;...VALID [written to ./banking_system.mutant.121.py] 
PROCESSING MUTANT: 66:         print("1. Create Account")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 66:         print("1. Create Account")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 67:         print("2. Deposit Money")  ==>          print("2. Deposit Money")
        break;...VALID [written to ./banking_system.mutant.122.py] 
PROCESSING MUTANT: 67:         print("2. Deposit Money")  ==>          print("2. Deposit Money")
        continue;...VALID [written to ./banking_system.mutant.123.py] 
PROCESSING MUTANT: 67:         print("2. Deposit Money")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 67:         print("2. Deposit Money")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 68:         print("3. Withdraw Money")  ==>          print("3. Withdraw Money")
        break;...VALID [written to ./banking_system.mutant.124.py] 
PROCESSING MUTANT: 68:         print("3. Withdraw Money")  ==>          print("3. Withdraw Money")
        continue;...VALID [written to ./banking_system.mutant.125.py] 
PROCESSING MUTANT: 68:         print("3. Withdraw Money")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 68:         print("3. Withdraw Money")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 69:         print("4. Transfer Money")  ==>          print("4. Transfer Money")
        break;...VALID [written to ./banking_system.mutant.126.py] 
PROCESSING MUTANT: 69:         print("4. Transfer Money")  ==>          print("4. Transfer Money")
        continue;...VALID [written to ./banking_system.mutant.127.py] 
PROCESSING MUTANT: 69:         print("4. Transfer Money")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 69:         print("4. Transfer Money")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 70:         print("5. Show Account Details")  ==>          print("5. Show Account Details")
        break;...VALID [written to ./banking_system.mutant.128.py] 
PROCESSING MUTANT: 70:         print("5. Show Account Details")  ==>          print("5. Show Account Details")
        continue;...VALID [written to ./banking_system.mutant.129.py] 
PROCESSING MUTANT: 70:         print("5. Show Account Details")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 70:         print("5. Show Account Details")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 71:         print("6. Show Transaction History")  ==>          print("6. Show Transaction History")
        break;...VALID [written to ./banking_system.mutant.130.py] 
PROCESSING MUTANT: 71:         print("6. Show Transaction History")  ==>          print("6. Show Transaction History")
        continue;...VALID [written to ./banking_system.mutant.131.py] 
PROCESSING MUTANT: 71:         print("6. Show Transaction History")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 71:         print("6. Show Transaction History")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 72:         print("7. Close Account")  ==>          print("7. Close Account")
        break;...VALID [written to ./banking_system.mutant.132.py] 
PROCESSING MUTANT: 72:         print("7. Close Account")  ==>          print("7. Close Account")
        continue;...VALID [written to ./banking_system.mutant.133.py] 
PROCESSING MUTANT: 72:         print("7. Close Account")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 72:         print("7. Close Account")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 73:         print("8. Exit")  ==>          print("8. Exit")
        break;...VALID [written to ./banking_system.mutant.134.py] 
PROCESSING MUTANT: 73:         print("8. Exit")  ==>          print("8. Exit")
        continue;...VALID [written to ./banking_system.mutant.135.py] 
PROCESSING MUTANT: 73:         print("8. Exit")  ==>          print("")...REDUNDANT 
PROCESSING MUTANT: 73:         print("8. Exit")  ==>          pass...REDUNDANT 
PROCESSING MUTANT: 74:         choice = input("Enter choice: ")  ==>          choice = input("Enter choice: ")
        break;...VALID [written to ./banking_system.mutant.136.py] 
PROCESSING MUTANT: 74:         choice = input("Enter choice: ")  ==>          choice = input("Enter choice: ")
        continue;...VALID [written to ./banking_system.mutant.137.py] 
PROCESSING MUTANT: 74:         choice = input("Enter choice: ")  ==>          choice = input("")...REDUNDANT 
PROCESSING MUTANT: 74:         choice = input("Enter choice: ")  ==>          pass...VALID [written to ./banking_system.mutant.138.py] 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice != '1':...VALID [written to ./banking_system.mutant.139.py] 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice <= '1':...VALID [written to ./banking_system.mutant.140.py] 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice >= '1':...VALID [written to ./banking_system.mutant.141.py] 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice > '1':...VALID [written to ./banking_system.mutant.142.py] 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice < '1':...VALID [written to ./banking_system.mutant.143.py] 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice == '0':...REDUNDANT 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice == '(1+1)':...REDUNDANT 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice == '(1-1)':...REDUNDANT 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice == '1':
        break;...INVALID 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice == '1':
        continue;...INVALID 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if not (choice == '1'):...VALID [written to ./banking_system.mutant.144.py] 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          pass...INVALID 
PROCESSING MUTANT: 76:         if choice == '1':  ==>          if choice == '':...REDUNDANT 
PROCESSING MUTANT: 77:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            break;...VALID [written to ./banking_system.mutant.145.py] 
PROCESSING MUTANT: 77:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            continue;...VALID [written to ./banking_system.mutant.146.py] 
PROCESSING MUTANT: 77:             account_number = input("Enter account number: ")  ==>              account_number = input("")...VALID [written to ./banking_system.mutant.147.py] 
PROCESSING MUTANT: 77:             account_number = input("Enter account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.148.py] 
PROCESSING MUTANT: 78:             owner = input("Enter account owner's name: ")  ==>              owner = input("Enter account owner's name: ")
            break;...VALID [written to ./banking_system.mutant.149.py] 
PROCESSING MUTANT: 78:             owner = input("Enter account owner's name: ")  ==>              owner = input("Enter account owner's name: ")
            continue;...VALID [written to ./banking_system.mutant.150.py] 
PROCESSING MUTANT: 78:             owner = input("Enter account owner's name: ")  ==>              owner = input("")...REDUNDANT 
PROCESSING MUTANT: 78:             owner = input("Enter account owner's name: ")  ==>              pass...VALID [written to ./banking_system.mutant.151.py] 
PROCESSING MUTANT: 79:             bank.create_account(account_number, owner)  ==>              bank.create_account(account_number, owner)
            break;...VALID [written to ./banking_system.mutant.152.py] 
PROCESSING MUTANT: 79:             bank.create_account(account_number, owner)  ==>              bank.create_account(account_number, owner)
            continue;...VALID [written to ./banking_system.mutant.153.py] 
PROCESSING MUTANT: 79:             bank.create_account(account_number, owner)  ==>              bank.create_account ( owner,account_number)...VALID [written to ./banking_system.mutant.154.py] 
PROCESSING MUTANT: 79:             bank.create_account(account_number, owner)  ==>              pass...VALID [written to ./banking_system.mutant.155.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice != '2':...VALID [written to ./banking_system.mutant.156.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice <= '2':...VALID [written to ./banking_system.mutant.157.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice >= '2':...VALID [written to ./banking_system.mutant.158.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice > '2':...VALID [written to ./banking_system.mutant.159.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice < '2':...VALID [written to ./banking_system.mutant.160.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '0':...REDUNDANT 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '1':...VALID [written to ./banking_system.mutant.161.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '(2+1)':...REDUNDANT 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '(2-1)':...REDUNDANT 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '2':
        break;...INVALID 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '2':
        continue;...INVALID 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif not (choice == '2'):...VALID [written to ./banking_system.mutant.162.py] 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          pass...INVALID 
PROCESSING MUTANT: 80:         elif choice == '2':  ==>          elif choice == '':...REDUNDANT 
PROCESSING MUTANT: 81:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            break;...VALID [written to ./banking_system.mutant.163.py] 
PROCESSING MUTANT: 81:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            continue;...VALID [written to ./banking_system.mutant.164.py] 
PROCESSING MUTANT: 81:             account_number = input("Enter account number: ")  ==>              account_number = input("")...VALID [written to ./banking_system.mutant.165.py] 
PROCESSING MUTANT: 81:             account_number = input("Enter account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.166.py] 
PROCESSING MUTANT: 82:             amount = float(input("Enter amount to deposit: "))    ==>              amount = float(input("Enter amount to deposit: "))  
            break;...VALID [written to ./banking_system.mutant.167.py] 
PROCESSING MUTANT: 82:             amount = float(input("Enter amount to deposit: "))    ==>              amount = float(input("Enter amount to deposit: "))  
            continue;...VALID [written to ./banking_system.mutant.168.py] 
PROCESSING MUTANT: 82:             amount = float(input("Enter amount to deposit: "))    ==>              amount = float(input(""))  ...REDUNDANT 
PROCESSING MUTANT: 82:             amount = float(input("Enter amount to deposit: "))    ==>              pass...VALID [written to ./banking_system.mutant.169.py] 
PROCESSING MUTANT: 83:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            break;...VALID [written to ./banking_system.mutant.170.py] 
PROCESSING MUTANT: 83:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            continue;...VALID [written to ./banking_system.mutant.171.py] 
PROCESSING MUTANT: 83:             account = bank.get_account(account_number)  ==>              pass...VALID [written to ./banking_system.mutant.172.py] 
PROCESSING MUTANT: 84:             if account:  ==>              if account:
            break;...INVALID 
PROCESSING MUTANT: 84:             if account:  ==>              if account:
            continue;...INVALID 
PROCESSING MUTANT: 84:             if account:  ==>              if not (account):...VALID [written to ./banking_system.mutant.173.py] 
PROCESSING MUTANT: 84:             if account:  ==>              pass...INVALID 
PROCESSING MUTANT: 85:                 account.deposit(amount)  ==>                  account.deposit(amount)
                break;...VALID [written to ./banking_system.mutant.174.py] 
PROCESSING MUTANT: 85:                 account.deposit(amount)  ==>                  account.deposit(amount)
                continue;...VALID [written to ./banking_system.mutant.175.py] 
PROCESSING MUTANT: 85:                 account.deposit(amount)  ==>                  pass...VALID [written to ./banking_system.mutant.176.py] 
PROCESSING MUTANT: 86:             else:  ==>              else:
            break;...INVALID 
PROCESSING MUTANT: 86:             else:  ==>              else:
            continue;...INVALID 
PROCESSING MUTANT: 86:             else:  ==>              pass...INVALID 
PROCESSING MUTANT: 87:                 print("Account not found.")  ==>                  print("Account not found.")
                break;...VALID [written to ./banking_system.mutant.177.py] 
PROCESSING MUTANT: 87:                 print("Account not found.")  ==>                  print("Account not found.")
                continue;...VALID [written to ./banking_system.mutant.178.py] 
PROCESSING MUTANT: 87:                 print("Account not found.")  ==>                  print("")...VALID [written to ./banking_system.mutant.179.py] 
PROCESSING MUTANT: 87:                 print("Account not found.")  ==>                  pass...VALID [written to ./banking_system.mutant.180.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice != '3':...VALID [written to ./banking_system.mutant.181.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice <= '3':...VALID [written to ./banking_system.mutant.182.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice >= '3':...VALID [written to ./banking_system.mutant.183.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice > '3':...VALID [written to ./banking_system.mutant.184.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice < '3':...VALID [written to ./banking_system.mutant.185.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '0':...REDUNDANT 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '1':...VALID [written to ./banking_system.mutant.186.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '(3+1)':...REDUNDANT 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '(3-1)':...REDUNDANT 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '3':
        break;...INVALID 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '3':
        continue;...INVALID 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif not (choice == '3'):...VALID [written to ./banking_system.mutant.187.py] 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          pass...INVALID 
PROCESSING MUTANT: 88:         elif choice == '3':  ==>          elif choice == '':...REDUNDANT 
PROCESSING MUTANT: 89:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            break;...VALID [written to ./banking_system.mutant.188.py] 
PROCESSING MUTANT: 89:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            continue;...VALID [written to ./banking_system.mutant.189.py] 
PROCESSING MUTANT: 89:             account_number = input("Enter account number: ")  ==>              account_number = input("")...VALID [written to ./banking_system.mutant.190.py] 
PROCESSING MUTANT: 89:             account_number = input("Enter account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.191.py] 
PROCESSING MUTANT: 90:             amount = float(input("Enter amount to withdraw: "))    ==>              amount = float(input("Enter amount to withdraw: "))  
            break;...VALID [written to ./banking_system.mutant.192.py] 
PROCESSING MUTANT: 90:             amount = float(input("Enter amount to withdraw: "))    ==>              amount = float(input("Enter amount to withdraw: "))  
            continue;...VALID [written to ./banking_system.mutant.193.py] 
PROCESSING MUTANT: 90:             amount = float(input("Enter amount to withdraw: "))    ==>              amount = float(input(""))  ...REDUNDANT 
PROCESSING MUTANT: 90:             amount = float(input("Enter amount to withdraw: "))    ==>              pass...VALID [written to ./banking_system.mutant.194.py] 
PROCESSING MUTANT: 91:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            break;...VALID [written to ./banking_system.mutant.195.py] 
PROCESSING MUTANT: 91:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            continue;...VALID [written to ./banking_system.mutant.196.py] 
PROCESSING MUTANT: 91:             account = bank.get_account(account_number)  ==>              pass...VALID [written to ./banking_system.mutant.197.py] 
PROCESSING MUTANT: 92:             if account:  ==>              if account:
            break;...INVALID 
PROCESSING MUTANT: 92:             if account:  ==>              if account:
            continue;...INVALID 
PROCESSING MUTANT: 92:             if account:  ==>              if not (account):...VALID [written to ./banking_system.mutant.198.py] 
PROCESSING MUTANT: 92:             if account:  ==>              pass...INVALID 
PROCESSING MUTANT: 93:                 account.withdraw(amount)  ==>                  account.withdraw(amount)
                break;...VALID [written to ./banking_system.mutant.199.py] 
PROCESSING MUTANT: 93:                 account.withdraw(amount)  ==>                  account.withdraw(amount)
                continue;...VALID [written to ./banking_system.mutant.200.py] 
PROCESSING MUTANT: 93:                 account.withdraw(amount)  ==>                  pass...VALID [written to ./banking_system.mutant.201.py] 
PROCESSING MUTANT: 94:             else:  ==>              else:
            break;...INVALID 
PROCESSING MUTANT: 94:             else:  ==>              else:
            continue;...INVALID 
PROCESSING MUTANT: 94:             else:  ==>              pass...INVALID 
PROCESSING MUTANT: 95:                 print("Account not found.")  ==>                  print("Account not found.")
                break;...VALID [written to ./banking_system.mutant.202.py] 
PROCESSING MUTANT: 95:                 print("Account not found.")  ==>                  print("Account not found.")
                continue;...VALID [written to ./banking_system.mutant.203.py] 
PROCESSING MUTANT: 95:                 print("Account not found.")  ==>                  print("")...VALID [written to ./banking_system.mutant.204.py] 
PROCESSING MUTANT: 95:                 print("Account not found.")  ==>                  pass...VALID [written to ./banking_system.mutant.205.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice != '4':...VALID [written to ./banking_system.mutant.206.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice <= '4':...VALID [written to ./banking_system.mutant.207.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice >= '4':...VALID [written to ./banking_system.mutant.208.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice > '4':...VALID [written to ./banking_system.mutant.209.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice < '4':...VALID [written to ./banking_system.mutant.210.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '0':...REDUNDANT 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '1':...VALID [written to ./banking_system.mutant.211.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '(4+1)':...REDUNDANT 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '(4-1)':...REDUNDANT 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '4':
        break;...INVALID 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '4':
        continue;...INVALID 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif not (choice == '4'):...VALID [written to ./banking_system.mutant.212.py] 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          pass...INVALID 
PROCESSING MUTANT: 96:         elif choice == '4':  ==>          elif choice == '':...REDUNDANT 
PROCESSING MUTANT: 97:             source_account_number = input("Enter source account number: ")  ==>              source_account_number = input("Enter source account number: ")
            break;...VALID [written to ./banking_system.mutant.213.py] 
PROCESSING MUTANT: 97:             source_account_number = input("Enter source account number: ")  ==>              source_account_number = input("Enter source account number: ")
            continue;...VALID [written to ./banking_system.mutant.214.py] 
PROCESSING MUTANT: 97:             source_account_number = input("Enter source account number: ")  ==>              source_account_number = input("")...REDUNDANT 
PROCESSING MUTANT: 97:             source_account_number = input("Enter source account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.215.py] 
PROCESSING MUTANT: 98:             target_account_number = input("Enter target account number: ")  ==>              target_account_number = input("Enter target account number: ")
            break;...VALID [written to ./banking_system.mutant.216.py] 
PROCESSING MUTANT: 98:             target_account_number = input("Enter target account number: ")  ==>              target_account_number = input("Enter target account number: ")
            continue;...VALID [written to ./banking_system.mutant.217.py] 
PROCESSING MUTANT: 98:             target_account_number = input("Enter target account number: ")  ==>              target_account_number = input("")...REDUNDANT 
PROCESSING MUTANT: 98:             target_account_number = input("Enter target account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.218.py] 
PROCESSING MUTANT: 99:             amount = float(input("Enter amount to transfer: "))    ==>              amount = float(input("Enter amount to transfer: "))  
            break;...VALID [written to ./banking_system.mutant.219.py] 
PROCESSING MUTANT: 99:             amount = float(input("Enter amount to transfer: "))    ==>              amount = float(input("Enter amount to transfer: "))  
            continue;...VALID [written to ./banking_system.mutant.220.py] 
PROCESSING MUTANT: 99:             amount = float(input("Enter amount to transfer: "))    ==>              amount = float(input(""))  ...REDUNDANT 
PROCESSING MUTANT: 99:             amount = float(input("Enter amount to transfer: "))    ==>              pass...VALID [written to ./banking_system.mutant.221.py] 
PROCESSING MUTANT: 100:             source_account = bank.get_account(source_account_number)  ==>              source_account = bank.get_account(source_account_number)
            break;...VALID [written to ./banking_system.mutant.222.py] 
PROCESSING MUTANT: 100:             source_account = bank.get_account(source_account_number)  ==>              source_account = bank.get_account(source_account_number)
            continue;...VALID [written to ./banking_system.mutant.223.py] 
PROCESSING MUTANT: 100:             source_account = bank.get_account(source_account_number)  ==>              pass...VALID [written to ./banking_system.mutant.224.py] 
PROCESSING MUTANT: 101:             target_account = bank.get_account(target_account_number)  ==>              target_account = bank.get_account(target_account_number)
            break;...VALID [written to ./banking_system.mutant.225.py] 
PROCESSING MUTANT: 101:             target_account = bank.get_account(target_account_number)  ==>              target_account = bank.get_account(target_account_number)
            continue;...VALID [written to ./banking_system.mutant.226.py] 
PROCESSING MUTANT: 101:             target_account = bank.get_account(target_account_number)  ==>              pass...VALID [written to ./banking_system.mutant.227.py] 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_account and target_account:
            break;...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_account and target_account:
            continue;...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if not (source_account and target_account):...VALID [written to ./banking_system.mutant.228.py] 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_account  or target_account:...VALID [written to ./banking_system.mutant.229.py] 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_account and True...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>  True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>   True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>    True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>     True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>      True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>       True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>        True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>         True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>          True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>           True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>            True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>             True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              True and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              iTrue and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              ifTrue and target_account:...INVALID 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if True and target_account:...VALID [written to ./banking_system.mutant.230.py] 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if sTrue and target_account:...VALID [written to ./banking_system.mutant.231.py] 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if soTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if souTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if sourTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if sourcTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if sourceTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_True and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_aTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_acTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_accTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_accoTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_accouTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_accounTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              if source_accountTrue and target_account:...REDUNDANT 
PROCESSING MUTANT: 102:             if source_account and target_account:  ==>              pass...INVALID 
PROCESSING MUTANT: 103:                 source_account.transfer(amount, target_account)  ==>                  source_account.transfer(amount, target_account)
                break;...VALID [written to ./banking_system.mutant.232.py] 
PROCESSING MUTANT: 103:                 source_account.transfer(amount, target_account)  ==>                  source_account.transfer(amount, target_account)
                continue;...VALID [written to ./banking_system.mutant.233.py] 
PROCESSING MUTANT: 103:                 source_account.transfer(amount, target_account)  ==>                  source_account.transfer ( target_account,amount)...VALID [written to ./banking_system.mutant.234.py] 
PROCESSING MUTANT: 103:                 source_account.transfer(amount, target_account)  ==>                  pass...VALID [written to ./banking_system.mutant.235.py] 
PROCESSING MUTANT: 104:             else:  ==>              else:
            break;...INVALID 
PROCESSING MUTANT: 104:             else:  ==>              else:
            continue;...INVALID 
PROCESSING MUTANT: 104:             else:  ==>              pass...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  print("One or more accounts not found.")
                break;...VALID [written to ./banking_system.mutant.236.py] 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  print("One or more accounts not found.")
                continue;...VALID [written to ./banking_system.mutant.237.py] 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  print("")...REDUNDANT 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  print("One or False...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>  False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>   False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>    False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>     False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>      False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>       False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>        False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>         False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>          False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>           False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>            False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>             False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>              False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>               False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                 False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  pFalse or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  prFalse or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  priFalse or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  prinFalse or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  printFalse or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  print(False or more accounts not found.")...INVALID 
PROCESSING MUTANT: 105:                 print("One or more accounts not found.")  ==>                  pass...VALID [written to ./banking_system.mutant.238.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice != '5':...VALID [written to ./banking_system.mutant.239.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice <= '5':...VALID [written to ./banking_system.mutant.240.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice >= '5':...VALID [written to ./banking_system.mutant.241.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice > '5':...VALID [written to ./banking_system.mutant.242.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice < '5':...VALID [written to ./banking_system.mutant.243.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '0':...REDUNDANT 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '1':...VALID [written to ./banking_system.mutant.244.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '(5+1)':...REDUNDANT 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '(5-1)':...REDUNDANT 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '5':
        break;...INVALID 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '5':
        continue;...INVALID 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif not (choice == '5'):...VALID [written to ./banking_system.mutant.245.py] 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          pass...INVALID 
PROCESSING MUTANT: 106:         elif choice == '5':  ==>          elif choice == '':...REDUNDANT 
PROCESSING MUTANT: 107:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            break;...VALID [written to ./banking_system.mutant.246.py] 
PROCESSING MUTANT: 107:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            continue;...VALID [written to ./banking_system.mutant.247.py] 
PROCESSING MUTANT: 107:             account_number = input("Enter account number: ")  ==>              account_number = input("")...VALID [written to ./banking_system.mutant.248.py] 
PROCESSING MUTANT: 107:             account_number = input("Enter account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.249.py] 
PROCESSING MUTANT: 108:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            break;...VALID [written to ./banking_system.mutant.250.py] 
PROCESSING MUTANT: 108:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            continue;...VALID [written to ./banking_system.mutant.251.py] 
PROCESSING MUTANT: 108:             account = bank.get_account(account_number)  ==>              pass...VALID [written to ./banking_system.mutant.252.py] 
PROCESSING MUTANT: 109:             if account:  ==>              if account:
            break;...INVALID 
PROCESSING MUTANT: 109:             if account:  ==>              if account:
            continue;...INVALID 
PROCESSING MUTANT: 109:             if account:  ==>              if not (account):...VALID [written to ./banking_system.mutant.253.py] 
PROCESSING MUTANT: 109:             if account:  ==>              pass...INVALID 
PROCESSING MUTANT: 110:                 print(account)  ==>                  print(account)
                break;...VALID [written to ./banking_system.mutant.254.py] 
PROCESSING MUTANT: 110:                 print(account)  ==>                  print(account)
                continue;...VALID [written to ./banking_system.mutant.255.py] 
PROCESSING MUTANT: 110:                 print(account)  ==>                  pass...VALID [written to ./banking_system.mutant.256.py] 
PROCESSING MUTANT: 111:             else:  ==>              else:
            break;...INVALID 
PROCESSING MUTANT: 111:             else:  ==>              else:
            continue;...INVALID 
PROCESSING MUTANT: 111:             else:  ==>              pass...INVALID 
PROCESSING MUTANT: 112:                 print("Account not found.")  ==>                  print("Account not found.")
                break;...VALID [written to ./banking_system.mutant.257.py] 
PROCESSING MUTANT: 112:                 print("Account not found.")  ==>                  print("Account not found.")
                continue;...VALID [written to ./banking_system.mutant.258.py] 
PROCESSING MUTANT: 112:                 print("Account not found.")  ==>                  print("")...VALID [written to ./banking_system.mutant.259.py] 
PROCESSING MUTANT: 112:                 print("Account not found.")  ==>                  pass...VALID [written to ./banking_system.mutant.260.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice != '6':...VALID [written to ./banking_system.mutant.261.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice <= '6':...VALID [written to ./banking_system.mutant.262.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice >= '6':...VALID [written to ./banking_system.mutant.263.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice > '6':...VALID [written to ./banking_system.mutant.264.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice < '6':...VALID [written to ./banking_system.mutant.265.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '0':...REDUNDANT 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '1':...VALID [written to ./banking_system.mutant.266.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '(6+1)':...REDUNDANT 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '(6-1)':...REDUNDANT 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '6':
        break;...INVALID 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '6':
        continue;...INVALID 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif not (choice == '6'):...VALID [written to ./banking_system.mutant.267.py] 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          pass...INVALID 
PROCESSING MUTANT: 113:         elif choice == '6':  ==>          elif choice == '':...REDUNDANT 
PROCESSING MUTANT: 114:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            break;...VALID [written to ./banking_system.mutant.268.py] 
PROCESSING MUTANT: 114:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            continue;...VALID [written to ./banking_system.mutant.269.py] 
PROCESSING MUTANT: 114:             account_number = input("Enter account number: ")  ==>              account_number = input("")...VALID [written to ./banking_system.mutant.270.py] 
PROCESSING MUTANT: 114:             account_number = input("Enter account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.271.py] 
PROCESSING MUTANT: 115:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            break;...VALID [written to ./banking_system.mutant.272.py] 
PROCESSING MUTANT: 115:             account = bank.get_account(account_number)  ==>              account = bank.get_account(account_number)
            continue;...VALID [written to ./banking_system.mutant.273.py] 
PROCESSING MUTANT: 115:             account = bank.get_account(account_number)  ==>              pass...VALID [written to ./banking_system.mutant.274.py] 
PROCESSING MUTANT: 116:             if account:  ==>              if account:
            break;...INVALID 
PROCESSING MUTANT: 116:             if account:  ==>              if account:
            continue;...INVALID 
PROCESSING MUTANT: 116:             if account:  ==>              if not (account):...VALID [written to ./banking_system.mutant.275.py] 
PROCESSING MUTANT: 116:             if account:  ==>              pass...INVALID 
PROCESSING MUTANT: 117:                 print("Transaction History:")  ==>                  print("Transaction History:")
                break;...VALID [written to ./banking_system.mutant.276.py] 
PROCESSING MUTANT: 117:                 print("Transaction History:")  ==>                  print("Transaction History:")
                continue;...VALID [written to ./banking_system.mutant.277.py] 
PROCESSING MUTANT: 117:                 print("Transaction History:")  ==>                  print("")...REDUNDANT 
PROCESSING MUTANT: 117:                 print("Transaction History:")  ==>                  pass...VALID [written to ./banking_system.mutant.278.py] 
PROCESSING MUTANT: 118:                 for transaction in account.get_transaction_history():  ==>                  for transaction in account.get_transaction_history():
                break;...INVALID 
PROCESSING MUTANT: 118:                 for transaction in account.get_transaction_history():  ==>                  for transaction in account.get_transaction_history():
                continue;...INVALID 
PROCESSING MUTANT: 118:                 for transaction in account.get_transaction_history():  ==>                  f andtransaction in account.get_transaction_history():...INVALID 
PROCESSING MUTANT: 118:                 for transaction in account.get_transaction_history():  ==>                  for False...INVALID 
PROCESSING MUTANT: 118:                 for transaction in account.get_transaction_history():  ==>                  pass...INVALID 
PROCESSING MUTANT: 119:                     print(transaction)  ==>                      print(transaction)
                    break;...VALID [written to ./banking_system.mutant.279.py] 
PROCESSING MUTANT: 119:                     print(transaction)  ==>                      print(transaction)
                    continue;...VALID [written to ./banking_system.mutant.280.py] 
PROCESSING MUTANT: 119:                     print(transaction)  ==>                      pass...VALID [written to ./banking_system.mutant.281.py] 
PROCESSING MUTANT: 120:             else:  ==>              else:
            break;...INVALID 
PROCESSING MUTANT: 120:             else:  ==>              else:
            continue;...INVALID 
PROCESSING MUTANT: 120:             else:  ==>              pass...INVALID 
PROCESSING MUTANT: 121:                 print("Account not found.")  ==>                  print("Account not found.")
                break;...VALID [written to ./banking_system.mutant.282.py] 
PROCESSING MUTANT: 121:                 print("Account not found.")  ==>                  print("Account not found.")
                continue;...VALID [written to ./banking_system.mutant.283.py] 
PROCESSING MUTANT: 121:                 print("Account not found.")  ==>                  print("")...VALID [written to ./banking_system.mutant.284.py] 
PROCESSING MUTANT: 121:                 print("Account not found.")  ==>                  pass...VALID [written to ./banking_system.mutant.285.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice != '7':...VALID [written to ./banking_system.mutant.286.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice <= '7':...VALID [written to ./banking_system.mutant.287.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice >= '7':...VALID [written to ./banking_system.mutant.288.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice > '7':...VALID [written to ./banking_system.mutant.289.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice < '7':...VALID [written to ./banking_system.mutant.290.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '0':...REDUNDANT 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '1':...VALID [written to ./banking_system.mutant.291.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '(7+1)':...REDUNDANT 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '(7-1)':...REDUNDANT 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '7':
        break;...INVALID 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '7':
        continue;...INVALID 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif not (choice == '7'):...VALID [written to ./banking_system.mutant.292.py] 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          pass...INVALID 
PROCESSING MUTANT: 122:         elif choice == '7':  ==>          elif choice == '':...REDUNDANT 
PROCESSING MUTANT: 123:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            break;...VALID [written to ./banking_system.mutant.293.py] 
PROCESSING MUTANT: 123:             account_number = input("Enter account number: ")  ==>              account_number = input("Enter account number: ")
            continue;...VALID [written to ./banking_system.mutant.294.py] 
PROCESSING MUTANT: 123:             account_number = input("Enter account number: ")  ==>              account_number = input("")...VALID [written to ./banking_system.mutant.295.py] 
PROCESSING MUTANT: 123:             account_number = input("Enter account number: ")  ==>              pass...VALID [written to ./banking_system.mutant.296.py] 
PROCESSING MUTANT: 124:             bank.close_account(account_number)  ==>              bank.close_account(account_number)
            break;...VALID [written to ./banking_system.mutant.297.py] 
PROCESSING MUTANT: 124:             bank.close_account(account_number)  ==>              bank.close_account(account_number)
            continue;...VALID [written to ./banking_system.mutant.298.py] 
PROCESSING MUTANT: 124:             bank.close_account(account_number)  ==>              pass...VALID [written to ./banking_system.mutant.299.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice != '8':...VALID [written to ./banking_system.mutant.300.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice <= '8':...VALID [written to ./banking_system.mutant.301.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice >= '8':...VALID [written to ./banking_system.mutant.302.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice > '8':...VALID [written to ./banking_system.mutant.303.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice < '8':...VALID [written to ./banking_system.mutant.304.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '0':...REDUNDANT 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '1':...VALID [written to ./banking_system.mutant.305.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '-1':...REDUNDANT 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '(8+1)':...REDUNDANT 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '(8-1)':...REDUNDANT 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '8':
        break;...INVALID 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '8':
        continue;...INVALID 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif not (choice == '8'):...VALID [written to ./banking_system.mutant.306.py] 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          pass...INVALID 
PROCESSING MUTANT: 125:         elif choice == '8':  ==>          elif choice == '':...REDUNDANT 
LINE 126:             break APPEARS TO BE COMMENT OR DEAD CODE, SKIPPING...
PROCESSING MUTANT: 127:         else:  ==>          else:
        break;...INVALID 
PROCESSING MUTANT: 127:         else:  ==>          else:
        continue;...INVALID 
PROCESSING MUTANT: 127:         else:  ==>          pass...INVALID 
PROCESSING MUTANT: 128:             print("Invalid choice. Please select a valid option.")  ==>              print("Invalid choice. Please select a valid option.")
            break;...VALID [written to ./banking_system.mutant.307.py] 
PROCESSING MUTANT: 128:             print("Invalid choice. Please select a valid option.")  ==>              print("Invalid choice. Please select a valid option.")
            continue;...VALID [written to ./banking_system.mutant.308.py] 
PROCESSING MUTANT: 128:             print("Invalid choice. Please select a valid option.")  ==>              print("")...REDUNDANT 
PROCESSING MUTANT: 128:             print("Invalid choice. Please select a valid option.")  ==>              pass...VALID [written to ./banking_system.mutant.309.py] 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ != '__main__':...VALID [written to ./banking_system.mutant.310.py] 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ <= '__main__':...VALID [written to ./banking_system.mutant.311.py] 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ >= '__main__':...VALID [written to ./banking_system.mutant.312.py] 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ > '__main__':...VALID [written to ./banking_system.mutant.313.py] 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ < '__main__':...VALID [written to ./banking_system.mutant.314.py] 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ == '__main__':
break;...INVALID 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ == '__main__':
continue;...INVALID 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if not (__name__ == '__main__'):...VALID [written to ./banking_system.mutant.315.py] 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  pass...INVALID 
PROCESSING MUTANT: 130: if __name__ == '__main__':  ==>  if __name__ == '':...REDUNDANT 
PROCESSING MUTANT: 131:     main()  ==>      main()
    break;...INVALID 
PROCESSING MUTANT: 131:     main()  ==>      main()
    continue;...INVALID 
PROCESSING MUTANT: 131:     main()  ==>      pass...VALID [written to ./banking_system.mutant.316.py] 
317 VALID MUTANTS
314 INVALID MUTANTS
110 REDUNDANT MUTANTS
Valid Percentage: 42.7800269905533%
user@73efacf12311:~/deepstate/project_cs567$ show_mutants banking_system.py
Traceback (most recent call last):
  File "/home/user/.local/bin/show_mutants", line 8, in <module>
    sys.exit(main())
  File "/home/user/.local/lib/python3.6/site-packages/universalmutator/show.py", line 57, in main
    mpart = ".mutant." + name.split(".mutant.")[1]
IndexError: list index out of range
user@73efacf12311:~/deepstate/project_cs567$ show_mutantsbanking_system.py
bash: show_mutantsbanking_system.py: command not found
user@73efacf12311:~/deepstate/project_cs567$ show_mutants killed.txt      
READ 315 MUTANTS
********************************************************************************
MUTANT #1:
banking_system.mutant.299.py: ./banking_system.py:124
*** Original
--- Mutant
***************
*** 121,127 ****
                  print("Account not found.")
          elif choice == '7':
              account_number = input("Enter account number: ")
!             bank.close_account(account_number)
          elif choice == '8':
              break
          else:
--- 121,127 ----
                  print("Account not found.")
          elif choice == '7':
              account_number = input("Enter account number: ")
!             pass
          elif choice == '8':
              break
          else:


********************************************************************************
MUTANT #2:
banking_system.mutant.226.py: ./banking_system.py:102
*** Original
--- Mutant
***************
*** 99,104 ****
--- 99,105 ----
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
+             continue;
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:


********************************************************************************
MUTANT #3:
banking_system.mutant.174.py: ./banking_system.py:86
*** Original
--- Mutant
***************
*** 83,88 ****
--- 83,89 ----
              account = bank.get_account(account_number)
              if account:
                  account.deposit(amount)
+                 break;
              else:
                  print("Account not found.")
          elif choice == '3':


********************************************************************************
MUTANT #4:
banking_system.mutant.78.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if not (amount > 0 and amount <= self.balance):
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #5:
banking_system.mutant.257.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,115 ****
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
+                 break;
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #6:
banking_system.mutant.204.py: ./banking_system.py:95
*** Original
--- Mutant
***************
*** 92,98 ****
              if account:
                  account.withdraw(amount)
              else:
!                 print("Account not found.")
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
--- 92,98 ----
              if account:
                  account.withdraw(amount)
              else:
!                 print("")
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")


********************************************************************************
MUTANT #7:
banking_system.mutant.284.py: ./banking_system.py:121
*** Original
--- Mutant
***************
*** 118,124 ****
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:
!                 print("Account not found.")
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
--- 118,124 ----
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:
!                 print("")
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)


********************************************************************************
MUTANT #8:
banking_system.mutant.57.py: ./banking_system.py:18
*** Original
--- Mutant
***************
*** 15,21 ****
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
--- 15,21 ----
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             pass
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")


********************************************************************************
MUTANT #9:
banking_system.mutant.14.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount == 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #10:
banking_system.mutant.279.py: ./banking_system.py:120
*** Original
--- Mutant
***************
*** 117,122 ****
--- 117,123 ----
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():
                      print(transaction)
+                     break;
              else:
                  print("Account not found.")
          elif choice == '7':


********************************************************************************
MUTANT #11:
banking_system.mutant.250.py: ./banking_system.py:109
*** Original
--- Mutant
***************
*** 106,111 ****
--- 106,112 ----
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
+             break;
              if account:
                  print(account)
              else:


********************************************************************************
MUTANT #12:
banking_system.mutant.161.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,83 ****
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '1':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #13:
banking_system.mutant.65.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount != self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #14:
banking_system.mutant.118.py: ./banking_system.py:66
*** Original
--- Mutant
***************
*** 63,68 ****
--- 63,69 ----
  
      while True:
          print("\nBanking System Menu")
+         continue;
          print("1. Create Account")
          print("2. Deposit Money")
          print("3. Withdraw Money")


********************************************************************************
MUTANT #15:
banking_system.mutant.141.py: ./banking_system.py:76
*** Original
--- Mutant
***************
*** 73,79 ****
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
--- 73,79 ----
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice >= '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)


********************************************************************************
MUTANT #16:
banking_system.mutant.242.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,109 ****
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice > '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #17:
banking_system.mutant.137.py: ./banking_system.py:75
*** Original
--- Mutant
***************
*** 72,77 ****
--- 72,78 ----
          print("7. Close Account")
          print("8. Exit")
          choice = input("Enter choice: ")
+         continue;
  
          if choice == '1':
              account_number = input("Enter account number: ")


********************************************************************************
MUTANT #18:
banking_system.mutant.97.py: ./banking_system.py:42
*** Original
--- Mutant
***************
*** 39,45 ****
  
  class Bank:
      def __init__(self):
!         self.accounts = {}
  
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:
--- 39,45 ----
  
  class Bank:
      def __init__(self):
!         pass
  
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:


********************************************************************************
MUTANT #19:
banking_system.mutant.79.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0  or amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #20:
banking_system.mutant.253.py: ./banking_system.py:109
*** Original
--- Mutant
***************
*** 106,112 ****
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
!             if account:
                  print(account)
              else:
                  print("Account not found.")
--- 106,112 ----
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
!             if not (account):
                  print(account)
              else:
                  print("Account not found.")


********************************************************************************
MUTANT #21:
banking_system.mutant.91.py: ./banking_system.py:27
*** Original
--- Mutant
***************
*** 24,30 ****
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
!             recipient_account.deposit(amount)
          else:
              print("Invalid transfer amount or insufficient funds.")
  
--- 24,30 ----
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
!             pass
          else:
              print("Invalid transfer amount or insufficient funds.")
  


********************************************************************************
MUTANT #22:
banking_system.mutant.9.py: ./banking_system.py:5
*** Original
--- Mutant
***************
*** 2,8 ****
  class BankAccount:
      def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
!         self.owner = owner
          self.balance = balance
          self.transaction_history = []
  
--- 2,8 ----
  class BankAccount:
      def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
!         pass
          self.balance = balance
          self.transaction_history = []
  


********************************************************************************
MUTANT #23:
banking_system.mutant.208.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,99 ****
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice >= '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  


********************************************************************************
MUTANT #24:
banking_system.mutant.123.py: ./banking_system.py:68
*** Original
--- Mutant
***************
*** 65,70 ****
--- 65,71 ----
          print("\nBanking System Menu")
          print("1. Create Account")
          print("2. Deposit Money")
+         continue;
          print("3. Withdraw Money")
          print("4. Transfer Money")
          print("5. Show Account Details")


********************************************************************************
MUTANT #25:
banking_system.mutant.265.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,116 ****
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
!         elif choice < '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #26:
banking_system.mutant.114.py: ./banking_system.py:62
*** Original
--- Mutant
***************
*** 59,65 ****
              print("Account not found.")
  
  def main():
!     bank = Bank()
  
      while True:
          print("\nBanking System Menu")
--- 59,65 ----
              print("Account not found.")
  
  def main():
!     pass
  
      while True:
          print("\nBanking System Menu")


********************************************************************************
MUTANT #27:
banking_system.mutant.249.py: ./banking_system.py:107
*** Original
--- Mutant
***************
*** 104,110 ****
              else:
                  print("One or more accounts not found.")
          elif choice == '5':
!             account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
                  print(account)
--- 104,110 ----
              else:
                  print("One or more accounts not found.")
          elif choice == '5':
!             pass
              account = bank.get_account(account_number)
              if account:
                  print(account)


********************************************************************************
MUTANT #28:
banking_system.mutant.115.py: ./banking_system.py:64
*** Original
--- Mutant
***************
*** 61,67 ****
  def main():
      bank = Bank()
  
!     while True:
          print("\nBanking System Menu")
          print("1. Create Account")
          print("2. Deposit Money")
--- 61,67 ----
  def main():
      bank = Bank()
  
!     while not (True):
          print("\nBanking System Menu")
          print("1. Create Account")
          print("2. Deposit Money")


********************************************************************************
MUTANT #29:
banking_system.mutant.185.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,91 ****
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice < '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #30:
banking_system.mutant.176.py: ./banking_system.py:85
*** Original
--- Mutant
***************
*** 82,88 ****
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:
!                 account.deposit(amount)
              else:
                  print("Account not found.")
          elif choice == '3':
--- 82,88 ----
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:
!                 pass
              else:
                  print("Account not found.")
          elif choice == '3':


********************************************************************************
MUTANT #31:
banking_system.mutant.66.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount < self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #32:
banking_system.mutant.86.py: ./banking_system.py:25
*** Original
--- Mutant
***************
*** 22,28 ****
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
--- 22,28 ----
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance =- amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:


********************************************************************************
MUTANT #33:
banking_system.mutant.260.py: ./banking_system.py:112
*** Original
--- Mutant
***************
*** 109,115 ****
              if account:
                  print(account)
              else:
!                 print("Account not found.")
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
--- 109,115 ----
              if account:
                  print(account)
              else:
!                 pass
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #34:
banking_system.mutant.69.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount < 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #35:
banking_system.mutant.110.py: ./banking_system.py:55
*** Original
--- Mutant
***************
*** 52,58 ****
          return self.accounts.get(account_number, None)
  
      def close_account(self, account_number):
!         if account_number in self.accounts:
              del self.accounts[account_number]
              print("Account closed successfully.")
          else:
--- 52,58 ----
          return self.accounts.get(account_number, None)
  
      def close_account(self, account_number):
!         if not (account_number in self.accounts):
              del self.accounts[account_number]
              print("Account closed successfully.")
          else:


********************************************************************************
MUTANT #36:
banking_system.mutant.125.py: ./banking_system.py:69
*** Original
--- Mutant
***************
*** 66,71 ****
--- 66,72 ----
          print("1. Create Account")
          print("2. Deposit Money")
          print("3. Withdraw Money")
+         continue;
          print("4. Transfer Money")
          print("5. Show Account Details")
          print("6. Show Transaction History")


********************************************************************************
MUTANT #37:
banking_system.mutant.160.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,83 ****
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice < '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #38:
banking_system.mutant.50.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if aTrue and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #39:
banking_system.mutant.61.py: ./banking_system.py:23
*** Original
--- Mutant
***************
*** 20,26 ****
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
!     def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
--- 20,26 ----
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
!     def transfer ( amount,self, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")


********************************************************************************
MUTANT #40:
banking_system.mutant.222.py: ./banking_system.py:101
*** Original
--- Mutant
***************
*** 98,103 ****
--- 98,104 ----
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
+             break;
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
                  source_account.transfer(amount, target_account)


********************************************************************************
MUTANT #41:
banking_system.mutant.146.py: ./banking_system.py:78
*** Original
--- Mutant
***************
*** 75,80 ****
--- 75,81 ----
  
          if choice == '1':
              account_number = input("Enter account number: ")
+             continue;
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':


********************************************************************************
MUTANT #42:
banking_system.mutant.36.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount > self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #43:
banking_system.mutant.244.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,109 ****
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '1':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #44:
banking_system.mutant.195.py: ./banking_system.py:92
*** Original
--- Mutant
***************
*** 89,94 ****
--- 89,95 ----
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
+             break;
              if account:
                  account.withdraw(amount)
              else:


********************************************************************************
MUTANT #45:
banking_system.mutant.262.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,116 ****
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
!         elif choice <= '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #46:
banking_system.mutant.275.py: ./banking_system.py:116
*** Original
--- Mutant
***************
*** 113,119 ****
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
!             if account:
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():
                      print(transaction)
--- 113,119 ----
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
!             if not (account):
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():
                      print(transaction)


********************************************************************************
MUTANT #47:
banking_system.mutant.183.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,91 ****
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice >= '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #48:
banking_system.mutant.16.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount <= 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #49:
banking_system.mutant.126.py: ./banking_system.py:70
*** Original
--- Mutant
***************
*** 67,72 ****
--- 67,73 ----
          print("2. Deposit Money")
          print("3. Withdraw Money")
          print("4. Transfer Money")
+         break;
          print("5. Show Account Details")
          print("6. Show Transaction History")
          print("7. Close Account")


********************************************************************************
MUTANT #50:
banking_system.mutant.56.py: ./banking_system.py:18
*** Original
--- Mutant
***************
*** 15,21 ****
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
--- 15,21 ----
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance = amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")


********************************************************************************
MUTANT #51:
banking_system.mutant.165.py: ./banking_system.py:81
*** Original
--- Mutant
***************
*** 78,84 ****
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':
!             account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:
--- 78,84 ----
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':
!             account_number = input("")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #52:
banking_system.mutant.96.py: ./banking_system.py:38
*** Original
--- Mutant
***************
*** 35,41 ****
          return self.transaction_history
  
      def __str__(self):
!         return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"
  
  class Bank:
      def __init__(self):
--- 35,41 ----
          return self.transaction_history
  
      def __str__(self):
!         return None
  
  class Bank:
      def __init__(self):


********************************************************************************
MUTANT #53:
banking_system.mutant.251.py: ./banking_system.py:109
*** Original
--- Mutant
***************
*** 106,111 ****
--- 106,112 ----
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
+             continue;
              if account:
                  print(account)
              else:


********************************************************************************
MUTANT #54:
banking_system.mutant.209.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,99 ****
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice > '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  


********************************************************************************
MUTANT #55:
banking_system.mutant.291.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,125 ****
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '1':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':


********************************************************************************
MUTANT #56:
banking_system.mutant.98.py: ./banking_system.py:44
*** Original
--- Mutant
***************
*** 41,47 ****
      def __init__(self):
          self.accounts = {}
  
!     def create_account(self, account_number, owner):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
--- 41,47 ----
      def __init__(self):
          self.accounts = {}
  
!     def create_account ( account_number,self, owner):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")


********************************************************************************
MUTANT #57:
banking_system.mutant.268.py: ./banking_system.py:115
*** Original
--- Mutant
***************
*** 112,117 ****
--- 112,118 ----
                  print("Account not found.")
          elif choice == '6':
              account_number = input("Enter account number: ")
+             break;
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")


********************************************************************************
MUTANT #58:
banking_system.mutant.111.py: ./banking_system.py:56
*** Original
--- Mutant
***************
*** 53,59 ****
  
      def close_account(self, account_number):
          if account_number in self.accounts:
!             del self.accounts[account_number]
              print("Account closed successfully.")
          else:
              print("Account not found.")
--- 53,59 ----
  
      def close_account(self, account_number):
          if account_number in self.accounts:
!             pass
              print("Account closed successfully.")
          else:
              print("Account not found.")


********************************************************************************
MUTANT #59:
banking_system.mutant.108.py: ./banking_system.py:52
*** Original
--- Mutant
***************
*** 49,55 ****
              print("Account already exists.")
  
      def get_account(self, account_number):
!         return self.accounts.get(account_number, None)
  
      def close_account(self, account_number):
          if account_number in self.accounts:
--- 49,55 ----
              print("Account already exists.")
  
      def get_account(self, account_number):
!         return None
  
      def close_account(self, account_number):
          if account_number in self.accounts:


********************************************************************************
MUTANT #60:
banking_system.mutant.29.py: ./banking_system.py:12
*** Original
--- Mutant
***************
*** 9,15 ****
      def deposit(self, amount):
          if amount > 0:
              self.balance += amount
!             self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
  
--- 9,15 ----
      def deposit(self, amount):
          if amount > 0:
              self.balance += amount
!             self.transaction_history.append(f"")
          else:
              print("Invalid deposit amount.")
  


********************************************************************************
MUTANT #61:
banking_system.mutant.145.py: ./banking_system.py:78
*** Original
--- Mutant
***************
*** 75,80 ****
--- 75,81 ----
  
          if choice == '1':
              account_number = input("Enter account number: ")
+             break;
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':


********************************************************************************
MUTANT #62:
banking_system.mutant.243.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,109 ****
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice < '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #63:
banking_system.mutant.92.py: ./banking_system.py:29
*** Original
--- Mutant
***************
*** 26,32 ****
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
!             print("Invalid transfer amount or insufficient funds.")
  
      def get_balance(self):
          return self.balance
--- 26,32 ----
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
!             pass
  
      def get_balance(self):
          return self.balance


********************************************************************************
MUTANT #64:
banking_system.mutant.297.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,127 ****
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
+             break;
          elif choice == '8':
              break
          else:


********************************************************************************
MUTANT #65:
banking_system.mutant.152.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,82 ****
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
+             break;
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  


********************************************************************************
MUTANT #66:
banking_system.mutant.184.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,91 ****
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice > '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #67:
banking_system.mutant.232.py: ./banking_system.py:104
*** Original
--- Mutant
***************
*** 101,106 ****
--- 101,107 ----
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
+                 break;
              else:
                  print("One or more accounts not found.")
          elif choice == '5':


********************************************************************************
MUTANT #68:
banking_system.mutant.122.py: ./banking_system.py:68
*** Original
--- Mutant
***************
*** 65,70 ****
--- 65,71 ----
          print("\nBanking System Menu")
          print("1. Create Account")
          print("2. Deposit Money")
+         break;
          print("3. Withdraw Money")
          print("4. Transfer Money")
          print("5. Show Account Details")


********************************************************************************
MUTANT #69:
banking_system.mutant.47.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if not (amount > 0 and amount <= self.balance):
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #70:
banking_system.mutant.171.py: ./banking_system.py:84
*** Original
--- Mutant
***************
*** 81,86 ****
--- 81,87 ----
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
+             continue;
              if account:
                  account.deposit(amount)
              else:


********************************************************************************
MUTANT #71:
banking_system.mutant.240.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,109 ****
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice <= '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #72:
banking_system.mutant.245.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,109 ****
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif not (choice == '5'):
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #73:
banking_system.mutant.303.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,128 ****
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice > '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")


********************************************************************************
MUTANT #74:
banking_system.mutant.81.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if aTrue and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #75:
banking_system.mutant.276.py: ./banking_system.py:118
*** Original
--- Mutant
***************
*** 115,120 ****
--- 115,121 ----
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")
+                 break;
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:


********************************************************************************
MUTANT #76:
banking_system.mutant.35.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount < self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #77:
banking_system.mutant.205.py: ./banking_system.py:95
*** Original
--- Mutant
***************
*** 92,98 ****
              if account:
                  account.withdraw(amount)
              else:
!                 print("Account not found.")
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
--- 92,98 ----
              if account:
                  account.withdraw(amount)
              else:
!                 pass
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")


********************************************************************************
MUTANT #78:
banking_system.mutant.7.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__(self, account_number, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #79:
banking_system.mutant.281.py: ./banking_system.py:119
*** Original
--- Mutant
***************
*** 116,122 ****
              if account:
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():
!                     print(transaction)
              else:
                  print("Account not found.")
          elif choice == '7':
--- 116,122 ----
              if account:
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():
!                     pass
              else:
                  print("Account not found.")
          elif choice == '7':


********************************************************************************
MUTANT #80:
banking_system.mutant.93.py: ./banking_system.py:32
*** Original
--- Mutant
***************
*** 29,35 ****
              print("Invalid transfer amount or insufficient funds.")
  
      def get_balance(self):
!         return self.balance
  
      def get_transaction_history(self):
          return self.transaction_history
--- 29,35 ----
              print("Invalid transfer amount or insufficient funds.")
  
      def get_balance(self):
!         return None
  
      def get_transaction_history(self):
          return self.transaction_history


********************************************************************************
MUTANT #81:
banking_system.mutant.217.py: ./banking_system.py:99
*** Original
--- Mutant
***************
*** 96,101 ****
--- 96,102 ----
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
+             continue;
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)


********************************************************************************
MUTANT #82:
banking_system.mutant.127.py: ./banking_system.py:70
*** Original
--- Mutant
***************
*** 67,72 ****
--- 67,73 ----
          print("2. Deposit Money")
          print("3. Withdraw Money")
          print("4. Transfer Money")
+         continue;
          print("5. Show Account Details")
          print("6. Show Transaction History")
          print("7. Close Account")


********************************************************************************
MUTANT #83:
banking_system.mutant.143.py: ./banking_system.py:76
*** Original
--- Mutant
***************
*** 73,79 ****
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
--- 73,79 ----
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice < '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)


********************************************************************************
MUTANT #84:
banking_system.mutant.271.py: ./banking_system.py:114
*** Original
--- Mutant
***************
*** 111,117 ****
              else:
                  print("Account not found.")
          elif choice == '6':
!             account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")
--- 111,117 ----
              else:
                  print("Account not found.")
          elif choice == '6':
!             pass
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")


********************************************************************************
MUTANT #85:
banking_system.mutant.128.py: ./banking_system.py:71
*** Original
--- Mutant
***************
*** 68,73 ****
--- 68,74 ----
          print("3. Withdraw Money")
          print("4. Transfer Money")
          print("5. Show Account Details")
+         break;
          print("6. Show Transaction History")
          print("7. Close Account")
          print("8. Exit")


********************************************************************************
MUTANT #86:
banking_system.mutant.109.py: ./banking_system.py:54
*** Original
--- Mutant
***************
*** 51,57 ****
      def get_account(self, account_number):
          return self.accounts.get(account_number, None)
  
!     def close_account(self, account_number):
          if account_number in self.accounts:
              del self.accounts[account_number]
              print("Account closed successfully.")
--- 51,57 ----
      def get_account(self, account_number):
          return self.accounts.get(account_number, None)
  
!     def close_account ( account_number,self):
          if account_number in self.accounts:
              del self.accounts[account_number]
              print("Account closed successfully.")


********************************************************************************
MUTANT #87:
banking_system.mutant.80.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if True and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #88:
banking_system.mutant.304.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,128 ****
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice < '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")


********************************************************************************
MUTANT #89:
banking_system.mutant.191.py: ./banking_system.py:89
*** Original
--- Mutant
***************
*** 86,92 ****
              else:
                  print("Account not found.")
          elif choice == '3':
!             account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:
--- 86,92 ----
              else:
                  print("Account not found.")
          elif choice == '3':
!             pass
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #90:
banking_system.mutant.292.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,125 ****
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
!         elif not (choice == '7'):
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':


********************************************************************************
MUTANT #91:
banking_system.mutant.229.py: ./banking_system.py:102
*** Original
--- Mutant
***************
*** 99,105 ****
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
--- 99,105 ----
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if source_account  or target_account:
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")


********************************************************************************
MUTANT #92:
banking_system.mutant.214.py: ./banking_system.py:98
*** Original
--- Mutant
***************
*** 95,100 ****
--- 95,101 ----
                  print("Account not found.")
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
+             continue;
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)


********************************************************************************
MUTANT #93:
banking_system.mutant.218.py: ./banking_system.py:98
*** Original
--- Mutant
***************
*** 95,101 ****
                  print("Account not found.")
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
!             target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
--- 95,101 ----
                  print("Account not found.")
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
!             pass
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)


********************************************************************************
MUTANT #94:
banking_system.mutant.17.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount != 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #95:
banking_system.mutant.106.py: ./banking_system.py:51
*** Original
--- Mutant
***************
*** 48,54 ****
          else:
              print("Account already exists.")
  
!     def get_account(self, account_number):
          return self.accounts.get(account_number, None)
  
      def close_account(self, account_number):
--- 48,54 ----
          else:
              print("Account already exists.")
  
!     def get_account ( account_number,self):
          return self.accounts.get(account_number, None)
  
      def close_account(self, account_number):


********************************************************************************
MUTANT #96:
banking_system.mutant.149.py: ./banking_system.py:79
*** Original
--- Mutant
***************
*** 76,81 ****
--- 76,82 ----
          if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
+             break;
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")


********************************************************************************
MUTANT #97:
banking_system.mutant.274.py: ./banking_system.py:115
*** Original
--- Mutant
***************
*** 112,118 ****
                  print("Account not found.")
          elif choice == '6':
              account_number = input("Enter account number: ")
!             account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():
--- 112,118 ----
                  print("Account not found.")
          elif choice == '6':
              account_number = input("Enter account number: ")
!             pass
              if account:
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():


********************************************************************************
MUTANT #98:
banking_system.mutant.210.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,99 ****
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice < '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  


********************************************************************************
MUTANT #99:
banking_system.mutant.296.py: ./banking_system.py:123
*** Original
--- Mutant
***************
*** 120,126 ****
              else:
                  print("Account not found.")
          elif choice == '7':
!             account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
              break
--- 120,126 ----
              else:
                  print("Account not found.")
          elif choice == '7':
!             pass
              bank.close_account(account_number)
          elif choice == '8':
              break


********************************************************************************
MUTANT #100:
banking_system.mutant.312.py: ./banking_system.py:130
*** Original
--- Mutant
***************
*** 127,131 ****
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ == '__main__':
      main()
--- 127,131 ----
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ >= '__main__':
      main()


********************************************************************************
MUTANT #101:
banking_system.mutant.227.py: ./banking_system.py:101
*** Original
--- Mutant
***************
*** 98,104 ****
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
!             target_account = bank.get_account(target_account_number)
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:
--- 98,104 ----
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
!             pass
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:


********************************************************************************
MUTANT #102:
banking_system.mutant.153.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,82 ****
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
+             continue;
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  


********************************************************************************
MUTANT #103:
banking_system.mutant.309.py: ./banking_system.py:128
*** Original
--- Mutant
***************
*** 125,131 ****
          elif choice == '8':
              break
          else:
!             print("Invalid choice. Please select a valid option.")
  
  if __name__ == '__main__':
      main()
--- 125,131 ----
          elif choice == '8':
              break
          else:
!             pass
  
  if __name__ == '__main__':
      main()


********************************************************************************
MUTANT #104:
banking_system.mutant.247.py: ./banking_system.py:108
*** Original
--- Mutant
***************
*** 105,110 ****
--- 105,111 ----
                  print("One or more accounts not found.")
          elif choice == '5':
              account_number = input("Enter account number: ")
+             continue;
              account = bank.get_account(account_number)
              if account:
                  print(account)


********************************************************************************
MUTANT #105:
banking_system.mutant.55.py: ./banking_system.py:18
*** Original
--- Mutant
***************
*** 15,21 ****
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
--- 15,21 ----
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance =- amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")


********************************************************************************
MUTANT #106:
banking_system.mutant.295.py: ./banking_system.py:123
*** Original
--- Mutant
***************
*** 120,126 ****
              else:
                  print("Account not found.")
          elif choice == '7':
!             account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
              break
--- 120,126 ----
              else:
                  print("Account not found.")
          elif choice == '7':
!             account_number = input("")
              bank.close_account(account_number)
          elif choice == '8':
              break


********************************************************************************
MUTANT #107:
banking_system.mutant.163.py: ./banking_system.py:82
*** Original
--- Mutant
***************
*** 79,84 ****
--- 79,85 ----
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")
+             break;
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #108:
banking_system.mutant.230.py: ./banking_system.py:102
*** Original
--- Mutant
***************
*** 99,105 ****
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
--- 99,105 ----
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if True and target_account:
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")


********************************************************************************
MUTANT #109:
banking_system.mutant.252.py: ./banking_system.py:108
*** Original
--- Mutant
***************
*** 105,111 ****
                  print("One or more accounts not found.")
          elif choice == '5':
              account_number = input("Enter account number: ")
!             account = bank.get_account(account_number)
              if account:
                  print(account)
              else:
--- 105,111 ----
                  print("One or more accounts not found.")
          elif choice == '5':
              account_number = input("Enter account number: ")
!             pass
              if account:
                  print(account)
              else:


********************************************************************************
MUTANT #110:
banking_system.mutant.21.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > (0-1):
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #111:
banking_system.mutant.267.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,116 ****
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
!         elif not (choice == '6'):
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #112:
banking_system.mutant.224.py: ./banking_system.py:100
*** Original
--- Mutant
***************
*** 97,103 ****
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
!             source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
--- 97,103 ----
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
!             pass
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
                  source_account.transfer(amount, target_account)


********************************************************************************
MUTANT #113:
banking_system.mutant.216.py: ./banking_system.py:99
*** Original
--- Mutant
***************
*** 96,101 ****
--- 96,102 ----
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
+             break;
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)


********************************************************************************
MUTANT #114:
banking_system.mutant.51.py: ./banking_system.py:18
*** Original
--- Mutant
***************
*** 15,21 ****
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
--- 15,21 ----
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance += amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")


********************************************************************************
MUTANT #115:
banking_system.mutant.77.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > (0-1) and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #116:
banking_system.mutant.301.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,128 ****
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice <= '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")


********************************************************************************
MUTANT #117:
banking_system.mutant.62.py: ./banking_system.py:23
*** Original
--- Mutant
***************
*** 20,26 ****
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
!     def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
--- 20,26 ----
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
!     def transfer(self , recipient_account, amount):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")


********************************************************************************
MUTANT #118:
banking_system.mutant.144.py: ./banking_system.py:76
*** Original
--- Mutant
***************
*** 73,79 ****
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
--- 73,79 ----
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if not (choice == '1'):
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)


********************************************************************************
MUTANT #119:
banking_system.mutant.88.py: ./banking_system.py:25
*** Original
--- Mutant
***************
*** 22,28 ****
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
--- 22,28 ----
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             pass
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:


********************************************************************************
MUTANT #120:
banking_system.mutant.46.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > (0-1) and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #121:
banking_system.mutant.121.py: ./banking_system.py:67
*** Original
--- Mutant
***************
*** 64,69 ****
--- 64,70 ----
      while True:
          print("\nBanking System Menu")
          print("1. Create Account")
+         continue;
          print("2. Deposit Money")
          print("3. Withdraw Money")
          print("4. Transfer Money")


********************************************************************************
MUTANT #122:
banking_system.mutant.169.py: ./banking_system.py:82
*** Original
--- Mutant
***************
*** 79,85 ****
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")
!             amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:
                  account.deposit(amount)
--- 79,85 ----
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")
!             pass
              account = bank.get_account(account_number)
              if account:
                  account.deposit(amount)


********************************************************************************
MUTANT #123:
banking_system.mutant.181.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,91 ****
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice != '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #124:
banking_system.mutant.11.py: ./banking_system.py:7
*** Original
--- Mutant
***************
*** 4,10 ****
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
!         self.transaction_history = []
  
      def deposit(self, amount):
          if amount > 0:
--- 4,10 ----
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
!         pass
  
      def deposit(self, amount):
          if amount > 0:


********************************************************************************
MUTANT #125:
banking_system.mutant.258.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,115 ****
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
+                 continue;
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #126:
banking_system.mutant.2.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=(0+1)):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #127:
banking_system.mutant.41.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount <= 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #128:
banking_system.mutant.117.py: ./banking_system.py:66
*** Original
--- Mutant
***************
*** 63,68 ****
--- 63,69 ----
  
      while True:
          print("\nBanking System Menu")
+         break;
          print("1. Create Account")
          print("2. Deposit Money")
          print("3. Withdraw Money")


********************************************************************************
MUTANT #129:
banking_system.mutant.248.py: ./banking_system.py:107
*** Original
--- Mutant
***************
*** 104,110 ****
              else:
                  print("One or more accounts not found.")
          elif choice == '5':
!             account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
                  print(account)
--- 104,110 ----
              else:
                  print("One or more accounts not found.")
          elif choice == '5':
!             account_number = input("")
              account = bank.get_account(account_number)
              if account:
                  print(account)


********************************************************************************
MUTANT #130:
banking_system.mutant.19.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > -1:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #131:
banking_system.mutant.154.py: ./banking_system.py:79
*** Original
--- Mutant
***************
*** 76,82 ****
          if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
!             bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
--- 76,82 ----
          if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
!             bank.create_account ( owner,account_number)
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  


********************************************************************************
MUTANT #132:
banking_system.mutant.25.py: ./banking_system.py:11
*** Original
--- Mutant
***************
*** 8,14 ****
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
--- 8,14 ----
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance /= amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")


********************************************************************************
MUTANT #133:
banking_system.mutant.131.py: ./banking_system.py:72
*** Original
--- Mutant
***************
*** 69,74 ****
--- 69,75 ----
          print("4. Transfer Money")
          print("5. Show Account Details")
          print("6. Show Transaction History")
+         continue;
          print("7. Close Account")
          print("8. Exit")
          choice = input("Enter choice: ")


********************************************************************************
MUTANT #134:
banking_system.mutant.140.py: ./banking_system.py:76
*** Original
--- Mutant
***************
*** 73,79 ****
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
--- 73,79 ----
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice <= '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)


********************************************************************************
MUTANT #135:
banking_system.mutant.39.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount == 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #136:
banking_system.mutant.221.py: ./banking_system.py:99
*** Original
--- Mutant
***************
*** 96,102 ****
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
!             amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
--- 96,102 ----
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
!             pass
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:


********************************************************************************
MUTANT #137:
banking_system.mutant.286.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,125 ****
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice != '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':


********************************************************************************
MUTANT #138:
banking_system.mutant.49.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if True and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #139:
banking_system.mutant.269.py: ./banking_system.py:115
*** Original
--- Mutant
***************
*** 112,117 ****
--- 112,118 ----
                  print("Account not found.")
          elif choice == '6':
              account_number = input("Enter account number: ")
+             continue;
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")


********************************************************************************
MUTANT #140:
banking_system.mutant.104.py: ./banking_system.py:47
*** Original
--- Mutant
***************
*** 44,50 ****
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
!             print("Account created successfully.")
          else:
              print("Account already exists.")
  
--- 44,50 ----
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
!             pass
          else:
              print("Account already exists.")
  


********************************************************************************
MUTANT #141:
banking_system.mutant.37.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount >= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #142:
banking_system.mutant.220.py: ./banking_system.py:100
*** Original
--- Mutant
***************
*** 97,102 ****
--- 97,103 ----
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
+             continue;
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:


********************************************************************************
MUTANT #143:
banking_system.mutant.263.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,116 ****
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
!         elif choice >= '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #144:
banking_system.mutant.89.py: ./banking_system.py:26
*** Original
--- Mutant
***************
*** 23,29 ****
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
              print("Invalid transfer amount or insufficient funds.")
--- 23,29 ----
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             self.transaction_history.append(f"")
              recipient_account.deposit(amount)
          else:
              print("Invalid transfer amount or insufficient funds.")


********************************************************************************
MUTANT #145:
banking_system.mutant.261.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,116 ****
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
!         elif choice != '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #146:
banking_system.mutant.73.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount != 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #147:
banking_system.mutant.4.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__ ( account_number,self, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #148:
banking_system.mutant.196.py: ./banking_system.py:92
*** Original
--- Mutant
***************
*** 89,94 ****
--- 89,95 ----
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
+             continue;
              if account:
                  account.withdraw(amount)
              else:


********************************************************************************
MUTANT #149:
banking_system.mutant.119.py: ./banking_system.py:65
*** Original
--- Mutant
***************
*** 62,68 ****
      bank = Bank()
  
      while True:
!         print("\nBanking System Menu")
          print("1. Create Account")
          print("2. Deposit Money")
          print("3. Withdraw Money")
--- 62,68 ----
      bank = Bank()
  
      while True:
!         pass
          print("1. Create Account")
          print("2. Deposit Money")
          print("3. Withdraw Money")


********************************************************************************
MUTANT #150:
banking_system.mutant.211.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,99 ****
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '1':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  


********************************************************************************
MUTANT #151:
banking_system.mutant.298.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,127 ****
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
+             continue;
          elif choice == '8':
              break
          else:


********************************************************************************
MUTANT #152:
banking_system.mutant.306.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,128 ****
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif not (choice == '8'):
              break
          else:
              print("Invalid choice. Please select a valid option.")


********************************************************************************
MUTANT #153:
banking_system.mutant.84.py: ./banking_system.py:25
*** Original
--- Mutant
***************
*** 22,28 ****
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
--- 22,28 ----
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance /= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:


********************************************************************************
MUTANT #154:
banking_system.mutant.139.py: ./banking_system.py:76
*** Original
--- Mutant
***************
*** 73,79 ****
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
--- 73,79 ----
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice != '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)


********************************************************************************
MUTANT #155:
banking_system.mutant.254.py: ./banking_system.py:111
*** Original
--- Mutant
***************
*** 108,113 ****
--- 108,114 ----
              account = bank.get_account(account_number)
              if account:
                  print(account)
+                 break;
              else:
                  print("Account not found.")
          elif choice == '6':


********************************************************************************
MUTANT #156:
banking_system.mutant.180.py: ./banking_system.py:87
*** Original
--- Mutant
***************
*** 84,90 ****
              if account:
                  account.deposit(amount)
              else:
!                 print("Account not found.")
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
--- 84,90 ----
              if account:
                  account.deposit(amount)
              else:
!                 pass
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  


********************************************************************************
MUTANT #157:
banking_system.mutant.188.py: ./banking_system.py:90
*** Original
--- Mutant
***************
*** 87,92 ****
--- 87,93 ----
                  print("Account not found.")
          elif choice == '3':
              account_number = input("Enter account number: ")
+             break;
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #158:
banking_system.mutant.179.py: ./banking_system.py:87
*** Original
--- Mutant
***************
*** 84,90 ****
              if account:
                  account.deposit(amount)
              else:
!                 print("Account not found.")
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
--- 84,90 ----
              if account:
                  account.deposit(amount)
              else:
!                 print("")
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  


********************************************************************************
MUTANT #159:
banking_system.mutant.167.py: ./banking_system.py:83
*** Original
--- Mutant
***************
*** 80,85 ****
--- 80,86 ----
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
+             break;
              account = bank.get_account(account_number)
              if account:
                  account.deposit(amount)


********************************************************************************
MUTANT #160:
banking_system.mutant.189.py: ./banking_system.py:90
*** Original
--- Mutant
***************
*** 87,92 ****
--- 87,93 ----
                  print("Account not found.")
          elif choice == '3':
              account_number = input("Enter account number: ")
+             continue;
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #161:
banking_system.mutant.314.py: ./banking_system.py:130
*** Original
--- Mutant
***************
*** 127,131 ****
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ == '__main__':
      main()
--- 127,131 ----
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ < '__main__':
      main()


********************************************************************************
MUTANT #162:
banking_system.mutant.1.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=-1):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #163:
banking_system.mutant.150.py: ./banking_system.py:79
*** Original
--- Mutant
***************
*** 76,81 ****
--- 76,82 ----
          if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
+             continue;
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")


********************************************************************************
MUTANT #164:
banking_system.mutant.100.py: ./banking_system.py:44
*** Original
--- Mutant
***************
*** 41,47 ****
      def __init__(self):
          self.accounts = {}
  
!     def create_account(self, account_number, owner):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
--- 41,47 ----
      def __init__(self):
          self.accounts = {}
  
!     def create_account(self, owner):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")


********************************************************************************
MUTANT #165:
banking_system.mutant.27.py: ./banking_system.py:11
*** Original
--- Mutant
***************
*** 8,14 ****
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
--- 8,14 ----
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance =+ amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")


********************************************************************************
MUTANT #166:
banking_system.mutant.235.py: ./banking_system.py:103
*** Original
--- Mutant
***************
*** 100,106 ****
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
!                 source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
          elif choice == '5':
--- 100,106 ----
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
!                 pass
              else:
                  print("One or more accounts not found.")
          elif choice == '5':


********************************************************************************
MUTANT #167:
banking_system.mutant.202.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,98 ****
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
+                 break;
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")


********************************************************************************
MUTANT #168:
banking_system.mutant.20.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > (0+1):
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #169:
banking_system.mutant.172.py: ./banking_system.py:83
*** Original
--- Mutant
***************
*** 80,86 ****
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
!             account = bank.get_account(account_number)
              if account:
                  account.deposit(amount)
              else:
--- 80,86 ----
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
!             pass
              if account:
                  account.deposit(amount)
              else:


********************************************************************************
MUTANT #170:
banking_system.mutant.40.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount >= 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #171:
banking_system.mutant.259.py: ./banking_system.py:112
*** Original
--- Mutant
***************
*** 109,115 ****
              if account:
                  print(account)
              else:
!                 print("Account not found.")
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
--- 109,115 ----
              if account:
                  print(account)
              else:
!                 print("")
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #172:
banking_system.mutant.72.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount <= 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #173:
banking_system.mutant.241.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,109 ****
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice >= '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #174:
banking_system.mutant.95.py: ./banking_system.py:38
*** Original
--- Mutant
***************
*** 35,41 ****
          return self.transaction_history
  
      def __str__(self):
!         return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"
  
  class Bank:
      def __init__(self):
--- 35,41 ----
          return self.transaction_history
  
      def __str__(self):
!         return f""
  
  class Bank:
      def __init__(self):


********************************************************************************
MUTANT #175:
banking_system.mutant.215.py: ./banking_system.py:97
*** Original
--- Mutant
***************
*** 94,100 ****
              else:
                  print("Account not found.")
          elif choice == '4':
!             source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
--- 94,100 ----
              else:
                  print("Account not found.")
          elif choice == '4':
!             pass
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)


********************************************************************************
MUTANT #176:
banking_system.mutant.99.py: ./banking_system.py:44
*** Original
--- Mutant
***************
*** 41,47 ****
      def __init__(self):
          self.accounts = {}
  
!     def create_account(self, account_number, owner):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
--- 41,47 ----
      def __init__(self):
          self.accounts = {}
  
!     def create_account(self , owner, account_number):
          if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")


********************************************************************************
MUTANT #177:
banking_system.mutant.173.py: ./banking_system.py:84
*** Original
--- Mutant
***************
*** 81,87 ****
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
!             if account:
                  account.deposit(amount)
              else:
                  print("Account not found.")
--- 81,87 ----
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
!             if not (account):
                  account.deposit(amount)
              else:
                  print("Account not found.")


********************************************************************************
MUTANT #178:
banking_system.mutant.294.py: ./banking_system.py:124
*** Original
--- Mutant
***************
*** 121,126 ****
--- 121,127 ----
                  print("Account not found.")
          elif choice == '7':
              account_number = input("Enter account number: ")
+             continue;
              bank.close_account(account_number)
          elif choice == '8':
              break


********************************************************************************
MUTANT #179:
banking_system.mutant.239.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,109 ****
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
!         elif choice != '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #180:
banking_system.mutant.238.py: ./banking_system.py:105
*** Original
--- Mutant
***************
*** 102,108 ****
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:
!                 print("One or more accounts not found.")
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
--- 102,108 ----
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:
!                 pass
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #181:
banking_system.mutant.166.py: ./banking_system.py:81
*** Original
--- Mutant
***************
*** 78,84 ****
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':
!             account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:
--- 78,84 ----
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':
!             pass
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #182:
banking_system.mutant.48.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0  or amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #183:
banking_system.mutant.177.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,90 ****
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
+                 break;
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  


********************************************************************************
MUTANT #184:
banking_system.mutant.101.py: ./banking_system.py:45
*** Original
--- Mutant
***************
*** 42,48 ****
          self.accounts = {}
  
      def create_account(self, account_number, owner):
!         if account_number not in self.accounts:
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
          else:
--- 42,48 ----
          self.accounts = {}
  
      def create_account(self, account_number, owner):
!         if not (account_number not in self.accounts):
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
          else:


********************************************************************************
MUTANT #185:
banking_system.mutant.197.py: ./banking_system.py:91
*** Original
--- Mutant
***************
*** 88,94 ****
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
!             account = bank.get_account(account_number)
              if account:
                  account.withdraw(amount)
              else:
--- 88,94 ----
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
!             pass
              if account:
                  account.withdraw(amount)
              else:


********************************************************************************
MUTANT #186:
banking_system.mutant.15.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount >= 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #187:
banking_system.mutant.190.py: ./banking_system.py:89
*** Original
--- Mutant
***************
*** 86,92 ****
              else:
                  print("Account not found.")
          elif choice == '3':
!             account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:
--- 86,92 ----
              else:
                  print("Account not found.")
          elif choice == '3':
!             account_number = input("")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #188:
banking_system.mutant.228.py: ./banking_system.py:102
*** Original
--- Mutant
***************
*** 99,105 ****
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
--- 99,105 ----
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if not (source_account and target_account):
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")


********************************************************************************
MUTANT #189:
banking_system.mutant.112.py: ./banking_system.py:57
*** Original
--- Mutant
***************
*** 54,60 ****
      def close_account(self, account_number):
          if account_number in self.accounts:
              del self.accounts[account_number]
!             print("Account closed successfully.")
          else:
              print("Account not found.")
  
--- 54,60 ----
      def close_account(self, account_number):
          if account_number in self.accounts:
              del self.accounts[account_number]
!             pass
          else:
              print("Account not found.")
  


********************************************************************************
MUTANT #190:
banking_system.mutant.82.py: ./banking_system.py:25
*** Original
--- Mutant
***************
*** 22,28 ****
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
--- 22,28 ----
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance += amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:


********************************************************************************
MUTANT #191:
banking_system.mutant.203.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,98 ****
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
+                 continue;
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")


********************************************************************************
MUTANT #192:
banking_system.mutant.10.py: ./banking_system.py:6
*** Original
--- Mutant
***************
*** 3,9 ****
      def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
!         self.balance = balance
          self.transaction_history = []
  
      def deposit(self, amount):
--- 3,9 ----
      def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
!         pass
          self.transaction_history = []
  
      def deposit(self, amount):


********************************************************************************
MUTANT #193:
banking_system.mutant.237.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,108 ****
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
+                 continue;
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #194:
banking_system.mutant.264.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,116 ****
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
!         elif choice > '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #195:
banking_system.mutant.75.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > -1 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #196:
banking_system.mutant.52.py: ./banking_system.py:18
*** Original
--- Mutant
***************
*** 15,21 ****
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
--- 15,21 ----
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance *= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")


********************************************************************************
MUTANT #197:
banking_system.mutant.302.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,128 ****
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice >= '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")


********************************************************************************
MUTANT #198:
banking_system.mutant.71.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount >= 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #199:
banking_system.mutant.233.py: ./banking_system.py:104
*** Original
--- Mutant
***************
*** 101,106 ****
--- 101,107 ----
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
+                 continue;
              else:
                  print("One or more accounts not found.")
          elif choice == '5':


********************************************************************************
MUTANT #200:
banking_system.mutant.64.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount == self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #201:
banking_system.mutant.26.py: ./banking_system.py:11
*** Original
--- Mutant
***************
*** 8,14 ****
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
--- 8,14 ----
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance %= amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")


********************************************************************************
MUTANT #202:
banking_system.mutant.133.py: ./banking_system.py:73
*** Original
--- Mutant
***************
*** 70,75 ****
--- 70,76 ----
          print("5. Show Account Details")
          print("6. Show Transaction History")
          print("7. Close Account")
+         continue;
          print("8. Exit")
          choice = input("Enter choice: ")
  


********************************************************************************
MUTANT #203:
banking_system.mutant.130.py: ./banking_system.py:72
*** Original
--- Mutant
***************
*** 69,74 ****
--- 69,75 ----
          print("4. Transfer Money")
          print("5. Show Account Details")
          print("6. Show Transaction History")
+         break;
          print("7. Close Account")
          print("8. Exit")
          choice = input("Enter choice: ")


********************************************************************************
MUTANT #204:
banking_system.mutant.170.py: ./banking_system.py:84
*** Original
--- Mutant
***************
*** 81,86 ****
--- 81,87 ----
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
+             break;
              if account:
                  account.deposit(amount)
              else:


********************************************************************************
MUTANT #205:
banking_system.mutant.63.py: ./banking_system.py:23
*** Original
--- Mutant
***************
*** 20,26 ****
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
!     def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
--- 20,26 ----
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
!     def transfer(self, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")


********************************************************************************
MUTANT #206:
banking_system.mutant.135.py: ./banking_system.py:74
*** Original
--- Mutant
***************
*** 71,76 ****
--- 71,77 ----
          print("6. Show Transaction History")
          print("7. Close Account")
          print("8. Exit")
+         continue;
          choice = input("Enter choice: ")
  
          if choice == '1':


********************************************************************************
MUTANT #207:
banking_system.mutant.113.py: ./banking_system.py:59
*** Original
--- Mutant
***************
*** 56,62 ****
              del self.accounts[account_number]
              print("Account closed successfully.")
          else:
!             print("Account not found.")
  
  def main():
      bank = Bank()
--- 56,62 ----
              del self.accounts[account_number]
              print("Account closed successfully.")
          else:
!             pass
  
  def main():
      bank = Bank()


********************************************************************************
MUTANT #208:
banking_system.mutant.300.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,128 ****
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice != '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")


********************************************************************************
MUTANT #209:
banking_system.mutant.266.py: ./banking_system.py:113
*** Original
--- Mutant
***************
*** 110,116 ****
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
--- 110,116 ----
                  print(account)
              else:
                  print("Account not found.")
!         elif choice == '1':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #210:
banking_system.mutant.212.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,99 ****
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif not (choice == '4'):
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  


********************************************************************************
MUTANT #211:
banking_system.mutant.85.py: ./banking_system.py:25
*** Original
--- Mutant
***************
*** 22,28 ****
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
--- 22,28 ----
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance %= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:


********************************************************************************
MUTANT #212:
banking_system.mutant.107.py: ./banking_system.py:52
*** Original
--- Mutant
***************
*** 49,55 ****
              print("Account already exists.")
  
      def get_account(self, account_number):
!         return self.accounts.get(account_number, None)
  
      def close_account(self, account_number):
          if account_number in self.accounts:
--- 49,55 ----
              print("Account already exists.")
  
      def get_account(self, account_number):
!         return self.accounts.get ( None,account_number)
  
      def close_account(self, account_number):
          if account_number in self.accounts:


********************************************************************************
MUTANT #213:
banking_system.mutant.310.py: ./banking_system.py:130
*** Original
--- Mutant
***************
*** 127,131 ****
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ == '__main__':
      main()
--- 127,131 ----
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ != '__main__':
      main()


********************************************************************************
MUTANT #214:
banking_system.mutant.186.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,91 ****
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '1':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #215:
banking_system.mutant.142.py: ./banking_system.py:76
*** Original
--- Mutant
***************
*** 73,79 ****
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
--- 73,79 ----
          print("8. Exit")
          choice = input("Enter choice: ")
  
!         if choice > '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)


********************************************************************************
MUTANT #216:
banking_system.mutant.59.py: ./banking_system.py:19
*** Original
--- Mutant
***************
*** 16,22 ****
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
--- 16,22 ----
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             pass
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  


********************************************************************************
MUTANT #217:
banking_system.mutant.225.py: ./banking_system.py:102
*** Original
--- Mutant
***************
*** 99,104 ****
--- 99,105 ----
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
+             break;
              if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:


********************************************************************************
MUTANT #218:
banking_system.mutant.83.py: ./banking_system.py:25
*** Original
--- Mutant
***************
*** 22,28 ****
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
--- 22,28 ----
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance *= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:


********************************************************************************
MUTANT #219:
banking_system.mutant.308.py: ./banking_system.py:129
*** Original
--- Mutant
***************
*** 126,131 ****
--- 126,132 ----
              break
          else:
              print("Invalid choice. Please select a valid option.")
+             continue;
  
  if __name__ == '__main__':
      main()


********************************************************************************
MUTANT #220:
banking_system.mutant.200.py: ./banking_system.py:94
*** Original
--- Mutant
***************
*** 91,96 ****
--- 91,97 ----
              account = bank.get_account(account_number)
              if account:
                  account.withdraw(amount)
+                 continue;
              else:
                  print("Account not found.")
          elif choice == '4':


********************************************************************************
MUTANT #221:
banking_system.mutant.277.py: ./banking_system.py:118
*** Original
--- Mutant
***************
*** 115,120 ****
--- 115,121 ----
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")
+                 continue;
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:


********************************************************************************
MUTANT #222:
banking_system.mutant.231.py: ./banking_system.py:102
*** Original
--- Mutant
***************
*** 99,105 ****
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if source_account and target_account:
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
--- 99,105 ----
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
!             if sTrue and target_account:
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")


********************************************************************************
MUTANT #223:
banking_system.mutant.156.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,83 ****
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice != '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #224:
banking_system.mutant.60.py: ./banking_system.py:21
*** Original
--- Mutant
***************
*** 18,24 ****
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
!             print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
--- 18,24 ----
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
!             pass
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:


********************************************************************************
MUTANT #225:
banking_system.mutant.87.py: ./banking_system.py:25
*** Original
--- Mutant
***************
*** 22,28 ****
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
--- 22,28 ----
  
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
!             self.balance = amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:


********************************************************************************
MUTANT #226:
banking_system.mutant.290.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,125 ****
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice < '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':


********************************************************************************
MUTANT #227:
banking_system.mutant.74.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 1 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #228:
banking_system.mutant.168.py: ./banking_system.py:83
*** Original
--- Mutant
***************
*** 80,85 ****
--- 80,86 ----
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
+             continue;
              account = bank.get_account(account_number)
              if account:
                  account.deposit(amount)


********************************************************************************
MUTANT #229:
banking_system.mutant.199.py: ./banking_system.py:94
*** Original
--- Mutant
***************
*** 91,96 ****
--- 91,97 ----
              account = bank.get_account(account_number)
              if account:
                  account.withdraw(amount)
+                 break;
              else:
                  print("Account not found.")
          elif choice == '4':


********************************************************************************
MUTANT #230:
banking_system.mutant.30.py: ./banking_system.py:12
*** Original
--- Mutant
***************
*** 9,15 ****
      def deposit(self, amount):
          if amount > 0:
              self.balance += amount
!             self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
  
--- 9,15 ----
      def deposit(self, amount):
          if amount > 0:
              self.balance += amount
!             pass
          else:
              print("Invalid deposit amount.")
  


********************************************************************************
MUTANT #231:
banking_system.mutant.42.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount != 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #232:
banking_system.mutant.28.py: ./banking_system.py:11
*** Original
--- Mutant
***************
*** 8,14 ****
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
--- 8,14 ----
  
      def deposit(self, amount):
          if amount > 0:
!             pass
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")


********************************************************************************
MUTANT #233:
banking_system.mutant.201.py: ./banking_system.py:93
*** Original
--- Mutant
***************
*** 90,96 ****
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:
!                 account.withdraw(amount)
              else:
                  print("Account not found.")
          elif choice == '4':
--- 90,96 ----
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:
!                 pass
              else:
                  print("Account not found.")
          elif choice == '4':


********************************************************************************
MUTANT #234:
banking_system.mutant.293.py: ./banking_system.py:124
*** Original
--- Mutant
***************
*** 121,126 ****
--- 121,127 ----
                  print("Account not found.")
          elif choice == '7':
              account_number = input("Enter account number: ")
+             break;
              bank.close_account(account_number)
          elif choice == '8':
              break


********************************************************************************
MUTANT #235:
banking_system.mutant.282.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,124 ****
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
+                 break;
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)


********************************************************************************
MUTANT #236:
banking_system.mutant.120.py: ./banking_system.py:67
*** Original
--- Mutant
***************
*** 64,69 ****
--- 64,70 ----
      while True:
          print("\nBanking System Menu")
          print("1. Create Account")
+         break;
          print("2. Deposit Money")
          print("3. Withdraw Money")
          print("4. Transfer Money")


********************************************************************************
MUTANT #237:
banking_system.mutant.280.py: ./banking_system.py:120
*** Original
--- Mutant
***************
*** 117,122 ****
--- 117,123 ----
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():
                      print(transaction)
+                     continue;
              else:
                  print("Account not found.")
          elif choice == '7':


********************************************************************************
MUTANT #238:
banking_system.mutant.234.py: ./banking_system.py:103
*** Original
--- Mutant
***************
*** 100,106 ****
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
!                 source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
          elif choice == '5':
--- 100,106 ----
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
!                 source_account.transfer ( target_account,amount)
              else:
                  print("One or more accounts not found.")
          elif choice == '5':


********************************************************************************
MUTANT #239:
banking_system.mutant.219.py: ./banking_system.py:100
*** Original
--- Mutant
***************
*** 97,102 ****
--- 97,103 ----
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
+             break;
              source_account = bank.get_account(source_account_number)
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:


********************************************************************************
MUTANT #240:
banking_system.mutant.162.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,83 ****
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif not (choice == '2'):
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #241:
banking_system.mutant.124.py: ./banking_system.py:69
*** Original
--- Mutant
***************
*** 66,71 ****
--- 66,72 ----
          print("1. Create Account")
          print("2. Deposit Money")
          print("3. Withdraw Money")
+         break;
          print("4. Transfer Money")
          print("5. Show Account Details")
          print("6. Show Transaction History")


********************************************************************************
MUTANT #242:
banking_system.mutant.213.py: ./banking_system.py:98
*** Original
--- Mutant
***************
*** 95,100 ****
--- 95,101 ----
                  print("Account not found.")
          elif choice == '4':
              source_account_number = input("Enter source account number: ")
+             break;
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)


********************************************************************************
MUTANT #243:
banking_system.mutant.34.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount != self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #244:
banking_system.mutant.175.py: ./banking_system.py:86
*** Original
--- Mutant
***************
*** 83,88 ****
--- 83,89 ----
              account = bank.get_account(account_number)
              if account:
                  account.deposit(amount)
+                 continue;
              else:
                  print("Account not found.")
          elif choice == '3':


********************************************************************************
MUTANT #245:
banking_system.mutant.192.py: ./banking_system.py:91
*** Original
--- Mutant
***************
*** 88,93 ****
--- 88,94 ----
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
+             break;
              account = bank.get_account(account_number)
              if account:
                  account.withdraw(amount)


********************************************************************************
MUTANT #246:
banking_system.mutant.289.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,125 ****
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice > '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':


********************************************************************************
MUTANT #247:
banking_system.mutant.33.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount == self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #248:
banking_system.mutant.76.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > (0+1) and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #249:
banking_system.mutant.272.py: ./banking_system.py:116
*** Original
--- Mutant
***************
*** 113,118 ****
--- 113,119 ----
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
+             break;
              if account:
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():


********************************************************************************
MUTANT #250:
banking_system.mutant.223.py: ./banking_system.py:101
*** Original
--- Mutant
***************
*** 98,103 ****
--- 98,104 ----
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
              source_account = bank.get_account(source_account_number)
+             continue;
              target_account = bank.get_account(target_account_number)
              if source_account and target_account:
                  source_account.transfer(amount, target_account)


********************************************************************************
MUTANT #251:
banking_system.mutant.182.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,91 ****
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice <= '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #252:
banking_system.mutant.307.py: ./banking_system.py:129
*** Original
--- Mutant
***************
*** 126,131 ****
--- 126,132 ----
              break
          else:
              print("Invalid choice. Please select a valid option.")
+             break;
  
  if __name__ == '__main__':
      main()


********************************************************************************
MUTANT #253:
banking_system.mutant.3.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=(0-1)):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #254:
banking_system.mutant.103.py: ./banking_system.py:46
*** Original
--- Mutant
***************
*** 43,49 ****
  
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:
!             self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
          else:
              print("Account already exists.")
--- 43,49 ----
  
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:
!             pass
              print("Account created successfully.")
          else:
              print("Account already exists.")


********************************************************************************
MUTANT #255:
banking_system.mutant.44.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > -1 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #256:
banking_system.mutant.43.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 1 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #257:
banking_system.mutant.305.py: ./banking_system.py:125
*** Original
--- Mutant
***************
*** 122,128 ****
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '8':
              break
          else:
              print("Invalid choice. Please select a valid option.")
--- 122,128 ----
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
!         elif choice == '1':
              break
          else:
              print("Invalid choice. Please select a valid option.")


********************************************************************************
MUTANT #258:
banking_system.mutant.13.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount < 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #259:
banking_system.mutant.132.py: ./banking_system.py:73
*** Original
--- Mutant
***************
*** 70,75 ****
--- 70,76 ----
          print("5. Show Account Details")
          print("6. Show Transaction History")
          print("7. Close Account")
+         break;
          print("8. Exit")
          choice = input("Enter choice: ")
  


********************************************************************************
MUTANT #260:
banking_system.mutant.313.py: ./banking_system.py:130
*** Original
--- Mutant
***************
*** 127,131 ****
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ == '__main__':
      main()
--- 127,131 ----
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ > '__main__':
      main()


********************************************************************************
MUTANT #261:
banking_system.mutant.31.py: ./banking_system.py:14
*** Original
--- Mutant
***************
*** 11,17 ****
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
!             print("Invalid deposit amount.")
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
--- 11,17 ----
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
!             pass
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:


********************************************************************************
MUTANT #262:
banking_system.mutant.155.py: ./banking_system.py:79
*** Original
--- Mutant
***************
*** 76,82 ****
          if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
!             bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
--- 76,82 ----
          if choice == '1':
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
!             pass
          elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  


********************************************************************************
MUTANT #263:
banking_system.mutant.54.py: ./banking_system.py:18
*** Original
--- Mutant
***************
*** 15,21 ****
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
--- 15,21 ----
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance %= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")


********************************************************************************
MUTANT #264:
banking_system.mutant.53.py: ./banking_system.py:18
*** Original
--- Mutant
***************
*** 15,21 ****
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
--- 15,21 ----
  
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
!             self.balance /= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")


********************************************************************************
MUTANT #265:
banking_system.mutant.198.py: ./banking_system.py:92
*** Original
--- Mutant
***************
*** 89,95 ****
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
!             if account:
                  account.withdraw(amount)
              else:
                  print("Account not found.")
--- 89,95 ----
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
!             if not (account):
                  account.withdraw(amount)
              else:
                  print("Account not found.")


********************************************************************************
MUTANT #266:
banking_system.mutant.206.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,99 ****
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice != '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  


********************************************************************************
MUTANT #267:
banking_system.mutant.116.py: ./banking_system.py:64
*** Original
--- Mutant
***************
*** 61,67 ****
  def main():
      bank = Bank()
  
!     while True:
          print("\nBanking System Menu")
          print("1. Create Account")
          print("2. Deposit Money")
--- 61,67 ----
  def main():
      bank = Bank()
  
!     while False:
          print("\nBanking System Menu")
          print("1. Create Account")
          print("2. Deposit Money")


********************************************************************************
MUTANT #268:
banking_system.mutant.102.py: ./banking_system.py:46
*** Original
--- Mutant
***************
*** 43,49 ****
  
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:
!             self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
          else:
              print("Account already exists.")
--- 43,49 ----
  
      def create_account(self, account_number, owner):
          if account_number not in self.accounts:
!             self.accounts[account_number] = BankAccount ( owner,account_number)
              print("Account created successfully.")
          else:
              print("Account already exists.")


********************************************************************************
MUTANT #269:
banking_system.mutant.90.py: ./banking_system.py:26
*** Original
--- Mutant
***************
*** 23,29 ****
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
          else:
              print("Invalid transfer amount or insufficient funds.")
--- 23,29 ----
      def transfer(self, amount, recipient_account):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             pass
              recipient_account.deposit(amount)
          else:
              print("Invalid transfer amount or insufficient funds.")


********************************************************************************
MUTANT #270:
banking_system.mutant.187.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,91 ****
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
!         elif not (choice == '3'):
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #271:
banking_system.mutant.288.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,125 ****
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice >= '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':


********************************************************************************
MUTANT #272:
banking_system.mutant.147.py: ./banking_system.py:77
*** Original
--- Mutant
***************
*** 74,80 ****
          choice = input("Enter choice: ")
  
          if choice == '1':
!             account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':
--- 74,80 ----
          choice = input("Enter choice: ")
  
          if choice == '1':
!             account_number = input("")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':


********************************************************************************
MUTANT #273:
banking_system.mutant.8.py: ./banking_system.py:4
*** Original
--- Mutant
***************
*** 1,7 ****
  
  class BankAccount:
      def __init__(self, account_number, owner, balance=0):
!         self.account_number = account_number
          self.owner = owner
          self.balance = balance
          self.transaction_history = []
--- 1,7 ----
  
  class BankAccount:
      def __init__(self, account_number, owner, balance=0):
!         pass
          self.owner = owner
          self.balance = balance
          self.transaction_history = []


********************************************************************************
MUTANT #274:
banking_system.mutant.151.py: ./banking_system.py:78
*** Original
--- Mutant
***************
*** 75,81 ****
  
          if choice == '1':
              account_number = input("Enter account number: ")
!             owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")
--- 75,81 ----
  
          if choice == '1':
              account_number = input("Enter account number: ")
!             pass
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")


********************************************************************************
MUTANT #275:
banking_system.mutant.23.py: ./banking_system.py:11
*** Original
--- Mutant
***************
*** 8,14 ****
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
--- 8,14 ----
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance -= amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")


********************************************************************************
MUTANT #276:
banking_system.mutant.70.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount == 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #277:
banking_system.mutant.270.py: ./banking_system.py:114
*** Original
--- Mutant
***************
*** 111,117 ****
              else:
                  print("Account not found.")
          elif choice == '6':
!             account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")
--- 111,117 ----
              else:
                  print("Account not found.")
          elif choice == '6':
!             account_number = input("")
              account = bank.get_account(account_number)
              if account:
                  print("Transaction History:")


********************************************************************************
MUTANT #278:
banking_system.mutant.311.py: ./banking_system.py:130
*** Original
--- Mutant
***************
*** 127,131 ****
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ == '__main__':
      main()
--- 127,131 ----
          else:
              print("Invalid choice. Please select a valid option.")
  
! if __name__ <= '__main__':
      main()


********************************************************************************
MUTANT #279:
banking_system.mutant.45.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > (0+1) and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #280:
banking_system.mutant.236.py: ./banking_system.py:106
*** Original
--- Mutant
***************
*** 103,108 ****
--- 103,109 ----
                  source_account.transfer(amount, target_account)
              else:
                  print("One or more accounts not found.")
+                 break;
          elif choice == '5':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #281:
banking_system.mutant.32.py: ./banking_system.py:16
*** Original
--- Mutant
***************
*** 13,19 ****
          else:
              print("Invalid deposit amount.")
  
!     def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
--- 13,19 ----
          else:
              print("Invalid deposit amount.")
  
!     def withdraw ( amount,self):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")


********************************************************************************
MUTANT #282:
banking_system.mutant.134.py: ./banking_system.py:74
*** Original
--- Mutant
***************
*** 71,76 ****
--- 71,77 ----
          print("6. Show Transaction History")
          print("7. Close Account")
          print("8. Exit")
+         break;
          choice = input("Enter choice: ")
  
          if choice == '1':


********************************************************************************
MUTANT #283:
banking_system.mutant.18.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 1:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #284:
banking_system.mutant.0.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=1):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #285:
banking_system.mutant.287.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,125 ****
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
!         elif choice <= '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
          elif choice == '8':


********************************************************************************
MUTANT #286:
banking_system.mutant.283.py: ./banking_system.py:122
*** Original
--- Mutant
***************
*** 119,124 ****
--- 119,125 ----
                      print(transaction)
              else:
                  print("Account not found.")
+                 continue;
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)


********************************************************************************
MUTANT #287:
banking_system.mutant.6.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__(self, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #288:
banking_system.mutant.273.py: ./banking_system.py:116
*** Original
--- Mutant
***************
*** 113,118 ****
--- 113,119 ----
          elif choice == '6':
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
+             continue;
              if account:
                  print("Transaction History:")
                  for transaction in account.get_transaction_history():


********************************************************************************
MUTANT #289:
banking_system.mutant.67.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount > self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #290:
banking_system.mutant.105.py: ./banking_system.py:49
*** Original
--- Mutant
***************
*** 46,52 ****
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
          else:
!             print("Account already exists.")
  
      def get_account(self, account_number):
          return self.accounts.get(account_number, None)
--- 46,52 ----
              self.accounts[account_number] = BankAccount(account_number, owner)
              print("Account created successfully.")
          else:
!             pass
  
      def get_account(self, account_number):
          return self.accounts.get(account_number, None)


********************************************************************************
MUTANT #291:
banking_system.mutant.164.py: ./banking_system.py:82
*** Original
--- Mutant
***************
*** 79,84 ****
--- 79,85 ----
              bank.create_account(account_number, owner)
          elif choice == '2':
              account_number = input("Enter account number: ")
+             continue;
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
              if account:


********************************************************************************
MUTANT #292:
banking_system.mutant.68.py: ./banking_system.py:24
*** Original
--- Mutant
***************
*** 21,27 ****
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)
--- 21,27 ----
              print("Invalid withdrawal amount or insufficient funds.")
  
      def transfer(self, amount, recipient_account):
!         if amount > 0 and amount >= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Transfer to {recipient_account.owner}: -${amount:.2f}")
              recipient_account.deposit(amount)


********************************************************************************
MUTANT #293:
banking_system.mutant.38.py: ./banking_system.py:17
*** Original
--- Mutant
***************
*** 14,20 ****
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount > 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
--- 14,20 ----
              print("Invalid deposit amount.")
  
      def withdraw(self, amount):
!         if amount < 0 and amount <= self.balance:
              self.balance -= amount
              self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:


********************************************************************************
MUTANT #294:
banking_system.mutant.207.py: ./banking_system.py:96
*** Original
--- Mutant
***************
*** 93,99 ****
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice == '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  
--- 93,99 ----
                  account.withdraw(amount)
              else:
                  print("Account not found.")
!         elif choice <= '4':
              source_account_number = input("Enter source account number: ")
              target_account_number = input("Enter target account number: ")
              amount = float(input("Enter amount to transfer: "))  


********************************************************************************
MUTANT #295:
banking_system.mutant.136.py: ./banking_system.py:75
*** Original
--- Mutant
***************
*** 72,77 ****
--- 72,78 ----
          print("7. Close Account")
          print("8. Exit")
          choice = input("Enter choice: ")
+         break;
  
          if choice == '1':
              account_number = input("Enter account number: ")


********************************************************************************
MUTANT #296:
banking_system.mutant.194.py: ./banking_system.py:90
*** Original
--- Mutant
***************
*** 87,93 ****
                  print("Account not found.")
          elif choice == '3':
              account_number = input("Enter account number: ")
!             amount = float(input("Enter amount to withdraw: "))  
              account = bank.get_account(account_number)
              if account:
                  account.withdraw(amount)
--- 87,93 ----
                  print("Account not found.")
          elif choice == '3':
              account_number = input("Enter account number: ")
!             pass
              account = bank.get_account(account_number)
              if account:
                  account.withdraw(amount)


********************************************************************************
MUTANT #297:
banking_system.mutant.256.py: ./banking_system.py:110
*** Original
--- Mutant
***************
*** 107,113 ****
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
!                 print(account)
              else:
                  print("Account not found.")
          elif choice == '6':
--- 107,113 ----
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
!                 pass
              else:
                  print("Account not found.")
          elif choice == '6':


********************************************************************************
MUTANT #298:
banking_system.mutant.255.py: ./banking_system.py:111
*** Original
--- Mutant
***************
*** 108,113 ****
--- 108,114 ----
              account = bank.get_account(account_number)
              if account:
                  print(account)
+                 continue;
              else:
                  print("Account not found.")
          elif choice == '6':


********************************************************************************
MUTANT #299:
banking_system.mutant.138.py: ./banking_system.py:74
*** Original
--- Mutant
***************
*** 71,77 ****
          print("6. Show Transaction History")
          print("7. Close Account")
          print("8. Exit")
!         choice = input("Enter choice: ")
  
          if choice == '1':
              account_number = input("Enter account number: ")
--- 71,77 ----
          print("6. Show Transaction History")
          print("7. Close Account")
          print("8. Exit")
!         pass
  
          if choice == '1':
              account_number = input("Enter account number: ")


********************************************************************************
MUTANT #300:
banking_system.mutant.94.py: ./banking_system.py:35
*** Original
--- Mutant
***************
*** 32,38 ****
          return self.balance
  
      def get_transaction_history(self):
!         return self.transaction_history
  
      def __str__(self):
          return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"
--- 32,38 ----
          return self.balance
  
      def get_transaction_history(self):
!         return None
  
      def __str__(self):
          return f"Account Number: {self.account_number}, Owner: {self.owner}, Balance: ${self.balance:.2f}"


********************************************************************************
MUTANT #301:
banking_system.mutant.5.py: ./banking_system.py:3
*** Original
--- Mutant
***************
*** 1,6 ****
  
  class BankAccount:
!     def __init__(self, account_number, owner, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance
--- 1,6 ----
  
  class BankAccount:
!     def __init__(self , owner, account_number, balance=0):
          self.account_number = account_number
          self.owner = owner
          self.balance = balance


********************************************************************************
MUTANT #302:
banking_system.mutant.159.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,83 ****
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice > '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #303:
banking_system.mutant.158.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,83 ****
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice >= '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #304:
banking_system.mutant.12.py: ./banking_system.py:9
*** Original
--- Mutant
***************
*** 6,12 ****
          self.balance = balance
          self.transaction_history = []
  
!     def deposit(self, amount):
          if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
--- 6,12 ----
          self.balance = balance
          self.transaction_history = []
  
!     def deposit ( amount,self):
          if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")


********************************************************************************
MUTANT #305:
banking_system.mutant.246.py: ./banking_system.py:108
*** Original
--- Mutant
***************
*** 105,110 ****
--- 105,111 ----
                  print("One or more accounts not found.")
          elif choice == '5':
              account_number = input("Enter account number: ")
+             break;
              account = bank.get_account(account_number)
              if account:
                  print(account)


********************************************************************************
MUTANT #306:
banking_system.mutant.129.py: ./banking_system.py:71
*** Original
--- Mutant
***************
*** 68,73 ****
--- 68,74 ----
          print("3. Withdraw Money")
          print("4. Transfer Money")
          print("5. Show Account Details")
+         continue;
          print("6. Show Transaction History")
          print("7. Close Account")
          print("8. Exit")


********************************************************************************
MUTANT #307:
banking_system.mutant.278.py: ./banking_system.py:117
*** Original
--- Mutant
***************
*** 114,120 ****
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
!                 print("Transaction History:")
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:
--- 114,120 ----
              account_number = input("Enter account number: ")
              account = bank.get_account(account_number)
              if account:
!                 pass
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:


********************************************************************************
MUTANT #308:
banking_system.mutant.285.py: ./banking_system.py:121
*** Original
--- Mutant
***************
*** 118,124 ****
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:
!                 print("Account not found.")
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)
--- 118,124 ----
                  for transaction in account.get_transaction_history():
                      print(transaction)
              else:
!                 pass
          elif choice == '7':
              account_number = input("Enter account number: ")
              bank.close_account(account_number)


********************************************************************************
MUTANT #309:
banking_system.mutant.24.py: ./banking_system.py:11
*** Original
--- Mutant
***************
*** 8,14 ****
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")
--- 8,14 ----
  
      def deposit(self, amount):
          if amount > 0:
!             self.balance *= amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
              print("Invalid deposit amount.")


********************************************************************************
MUTANT #310:
banking_system.mutant.178.py: ./banking_system.py:88
*** Original
--- Mutant
***************
*** 85,90 ****
--- 85,91 ----
                  account.deposit(amount)
              else:
                  print("Account not found.")
+                 continue;
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  


********************************************************************************
MUTANT #311:
banking_system.mutant.22.py: ./banking_system.py:10
*** Original
--- Mutant
***************
*** 7,13 ****
          self.transaction_history = []
  
      def deposit(self, amount):
!         if amount > 0:
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:
--- 7,13 ----
          self.transaction_history = []
  
      def deposit(self, amount):
!         if not (amount > 0):
              self.balance += amount
              self.transaction_history.append(f"Deposit: +${amount:.2f}")
          else:


********************************************************************************
MUTANT #312:
banking_system.mutant.193.py: ./banking_system.py:91
*** Original
--- Mutant
***************
*** 88,93 ****
--- 88,94 ----
          elif choice == '3':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to withdraw: "))  
+             continue;
              account = bank.get_account(account_number)
              if account:
                  account.withdraw(amount)


********************************************************************************
MUTANT #313:
banking_system.mutant.157.py: ./banking_system.py:80
*** Original
--- Mutant
***************
*** 77,83 ****
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice == '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)
--- 77,83 ----
              account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
!         elif choice <= '2':
              account_number = input("Enter account number: ")
              amount = float(input("Enter amount to deposit: "))  
              account = bank.get_account(account_number)


********************************************************************************
MUTANT #314:
banking_system.mutant.148.py: ./banking_system.py:77
*** Original
--- Mutant
***************
*** 74,80 ****
          choice = input("Enter choice: ")
  
          if choice == '1':
!             account_number = input("Enter account number: ")
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':
--- 74,80 ----
          choice = input("Enter choice: ")
  
          if choice == '1':
!             pass
              owner = input("Enter account owner's name: ")
              bank.create_account(account_number, owner)
          elif choice == '2':


********************************************************************************
MUTANT #315:
banking_system.mutant.58.py: ./banking_system.py:19
*** Original
--- Mutant
***************
*** 16,22 ****
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             self.transaction_history.append(f"Withdrawal: -${amount:.2f}")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  
--- 16,22 ----
      def withdraw(self, amount):
          if amount > 0 and amount <= self.balance:
              self.balance -= amount
!             self.transaction_history.append(f"")
          else:
              print("Invalid withdrawal amount or insufficient funds.")
  


user@73efacf12311:~/deepstate/project_cs567$ show_mutants notkilled.txt
READ 0 MUTANTS
user@73efacf12311:~/deepstate/project_cs567$ intersect_mutants killed.txt notkilled.txt m1better.txt
user@73efacf12311:~/deepstate/project_cs567$ cat m1better.txt
user@73efacf12311:~/deepstate/project_cs567$ show_mutants m1better.txt
READ 0 MUTANTS
user@73efacf12311:~/deepstate/project_cs567$ clang++ -o TCAS TCAS_driver.cpp -ldeepstate
clang: error: no such file or directory: 'TCAS_driver.cpp'
user@73efacf12311:~/deepstate/project_cs567$ pip install coverage
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: coverage in /home/user/.local/lib/python3.6/site-packages (4.5.2)
user@73efacf12311:~/deepstate/project_cs567$ which tstl_rt
/home/user/.local/bin/tstl_rt
user@73efacf12311:~/deepstate/project_cs567$ coverage run /home/user/.local/bin/tstl_rt --timeout 30 --noCover
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ coverage erase
user@73efacf12311:~/deepstate/project_cs567$ coverage report
Name    Stmts   Miss  Cover
---------------------------
No data to report.
user@73efacf12311:~/deepstate/project_cs567$ coverage annotate
No data to report.
user@73efacf12311:~/deepstate/project_cs567$ less avl.py,cover | grep "^!" | wc -l
avl.py,cover: No such file or directory
0
user@73efacf12311:~/deepstate/project_cs567$ pip install coverage
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: coverage in /home/user/.local/lib/python3.6/site-packages (4.5.2)
user@73efacf12311:~/deepstate/project_cs567$ coverage run /home/user/.local/bin/tstl_rt --timeout 30 --noCover
Traceback (most recent call last):
  File "/home/user/.local/bin/tstl_rt", line 5, in <module>
    from tstl.randomtester import main
  File "/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py", line 21, in <module>
    import sut as SUT
  File "/home/user/deepstate/project_cs567/sut.py", line 68
    ACTION new_bank = "bank = banking_system.Bank()"
                  ^
SyntaxError: invalid syntax
user@73efacf12311:~/deepstate/project_cs567$ less avl.py,cover | grep "^!" | wc -l
avl.py,cover: No such file or directory
0
user@73efacf12311:~/deepstate/project_cs567$ coverage report
Name                                                                 Stmts   Miss  Cover
----------------------------------------------------------------------------------------
/home/user/.local/bin/tstl_rt                                            6      3    50%
/home/user/.local/lib/python3.6/site-packages/tstl/__init__.py           0      0   100%
/home/user/.local/lib/python3.6/site-packages/tstl/randomtester.py    1656   1640     1%
----------------------------------------------------------------------------------------
TOTAL                                                                 1662   1643     1%
user@73efacf12311:~/deepstate/project_cs567$ coverage annotate
user@73efacf12311:~/deepstate/project_cs567$ less avl.py,cover | grep "^!" | wc -l
avl.py,cover: No such file or directory
0
user@73efacf12311:~/deepstate/project_cs567$ coverage run /path/to/tstl_rt --timeout 30 --noCover
No file to run: '/path/to/tstl_rt'
user@73efacf12311:~/deepstate/project_cs567$ coverage run -m unittest discover
E
======================================================================
ERROR: test_banking_system (unittest.loader._FailedTest)
----------------------------------------------------------------------
ImportError: Failed to import test module: test_banking_system
Traceback (most recent call last):
  File "/usr/lib/python3.6/unittest/loader.py", line 428, in _find_test_path
    module = self._get_module_from_name(name)
  File "/usr/lib/python3.6/unittest/loader.py", line 369, in _get_module_from_name
    __import__(name)
  File "/home/user/deepstate/project_cs567/test_banking_system.py", line 56
    unittest.main()
           ^
IndentationError: expected an indented block


----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)
Coverage.py warning: No data was collected. (no-data-collected)
user@73efacf12311:~/deepstate/project_cs567$ coverage html
No data to report.
user@73efacf12311:~/deepstate/project_cs567$ 
user@73efacf12311:~/deepstate/project_cs567$ docker build -t my-app .
bash: docker: command not found
user@73efacf12311:~/deepstate/project_cs567$ docker run -it my-app
bash: docker: command not found
user@73efacf12311:~/deepstate/project_cs567$ docker build -t my-app .
bash: docker: command not found
user@73efacf12311:~/deepstate/project_cs567$ docker run -it my-app
bash: docker: command not found
user@73efacf12311:~/deepstate/project_cs567$ coverage run -m unittest discover
E
======================================================================
ERROR: test_banking_system (unittest.loader._FailedTest)
----------------------------------------------------------------------
ImportError: Failed to import test module: test_banking_system
Traceback (most recent call last):
  File "/usr/lib/python3.6/unittest/loader.py", line 428, in _find_test_path
    module = self._get_module_from_name(name)
  File "/usr/lib/python3.6/unittest/loader.py", line 369, in _get_module_from_name
    __import__(name)
  File "/home/user/deepstate/project_cs567/test_banking_system.py", line 56
    unittest.main()
           ^
IndentationError: expected an indented block


----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)
Coverage.py warning: No data was collected. (no-data-collected)
user@73efacf12311:~/deepstate/project_cs567$ coverage report
Name    Stmts   Miss  Cover
---------------------------
No data to report.
user@73efacf12311:~/deepstate/project_cs567$ 
